<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小吴学长</title>
  
  <subtitle>学习小记</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://bemuler.github.io/"/>
  <updated>2018-07-22T04:47:39.461Z</updated>
  <id>http://bemuler.github.io/</id>
  
  <author>
    <name>xwxz</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>golang是如何调度goroutine的？</title>
    <link href="http://bemuler.github.io/2018/07/22/Go%E8%B0%83%E5%BA%A6%E5%99%A8/"/>
    <id>http://bemuler.github.io/2018/07/22/Go调度器/</id>
    <published>2018-07-22T04:37:25.761Z</published>
    <updated>2018-07-22T04:47:39.461Z</updated>
    
    <content type="html"><![CDATA[<p>文章转载自：<a href="https://www.zhihu.com/question/20862617/answer/27964865" target="_blank" rel="noopener">https://www.zhihu.com/question/20862617/answer/27964865</a></p><p>本文主要讲解go是如何调度runtine的，结合图形的方式，让人更加清晰明了，英文原文戳<a href="https://link.zhihu.com/?target=http%3A//morsmachine.dk/go-scheduler" target="_blank" rel="noopener">这里</a>。此文作者陈诉完全翻译自<a href="https://link.zhihu.com/?target=http%3A//morsmachine.dk/go-scheduler" target="_blank" rel="noopener">The Go scheduler</a> ，感谢翻译者～</p><a id="more"></a><h3 id="Go-runtine的调度器"><a href="#Go-runtine的调度器" class="headerlink" title="Go runtine的调度器"></a>Go runtine的调度器</h3><p> 在了解Go的运行时的scheduler之前，需要先了解为什么需要它，因为我们可能会想，OS内核不是已经有一个线程scheduler了嘛？<br> 熟悉POSIX API的人都知道，POSIX的方案在很大程度上是对Unix process进场模型的一个逻辑描述和扩展，两者有很多相似的地方。 Thread有自己的信号掩码，CPU affinity等。但是很多特征对于Go程序来说都是累赘。 尤其是context上下文切换的耗时。另一个原因是Go的垃圾回收需要所有的goroutine停止，使得内存在一个一致的状态。垃圾回收的时间点是不确定的，如果依靠OS自身的scheduler来调度，那么会有大量的线程需要停止工作。 </p><p>单独的开发一个GO得调度器，可以是其知道在什么时候内存状态是一致的，也就是说，当开始垃圾回收时，运行时只需要为当时正在CPU核上运行的那个线程等待即可，而不是等待所有的线程。</p><p>用户空间线程和内核空间线程之间的映射关系有：N:1,1:1和M:N<br> <strong>N:1是说</strong>：多个（N）用户线程始终在一个内核线程上跑，context上下文切换确实很快，但是无法真正的利用多核。<br> <strong>1:1是说</strong>：一个用户线程就只在一个内核线程上跑，这时可以利用多核，但是上下文switch很慢。<br> <strong>M:N是说</strong>：多个goroutine在多个内核线程上跑，这个看似可以集齐上面两者的优势，但是无疑增加了调度的难度。</p><p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1ftijg0tvwaj30av02vjrp.jpg" alt="img"></p><p> Go的调度器内部有三个重要的结构：M，P，S<br> <strong>M:</strong>代表真正的内核OS线程，和POSIX里的thread差不多，真正干活的人<br> <strong>G:</strong>代表一个goroutine，它有自己的栈，instruction pointer和其他信息（正在等待的channel等等），用于调度。<br> <strong>P:</strong>代表调度的上下文，可以把它看做一个局部的调度器，使go代码在一个线程上跑，它是实现从N:1到N:M映射的关键。</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1ftijh62jovj30b40av75n.jpg" alt="img"></p><p> 图中看，有2个物理线程M，每一个M都拥有一个context（P），每一个也都有一个正在运行的goroutine。<br> P的数量可以通过GOMAXPROCS()来设置，它其实也就代表了真正的并发度，即有多少个goroutine可以同时运行。<br> 图中灰色的那些goroutine并没有运行，而是出于ready的就绪态，正在等待被调度。P维护着这个队列（称之为runqueue），<br> Go语言里，启动一个goroutine很容易：go function 就行，所以每有一个go语句被执行，runqueue队列就在其末尾加入一个<br> goroutine，在下一个调度点，就从runqueue中取出（如何决定取哪个goroutine？）一个goroutine执行。</p><p>为何要维护多个上下文P？因为当一个OS线程被阻塞时，P可以转而投奔另一个OS线程！<br> 图中看到，当一个OS线程M0陷入阻塞时，P转而在OS线程M1上运行。调度器保证有足够的线程来运行所以的context P。</p><p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1ftijgiggl3j30fa0b4wfz.jpg" alt="img"></p><p> 图中的M1可能是被创建，或者从线程缓存中取出。</p><p>当MO返回时，它必须尝试取得一个context P来运行goroutine，一般情况下，它会从其他的OS线程那里steal偷一个context过来，<br> 如果没有偷到的话，它就把goroutine放在一个global runqueue里，然后自己就去睡大觉了（放入线程缓存里）。Contexts们也会周期性的检查global runqueue，否则global runqueue上的goroutine永远无法执行。</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1ftijga28wzj30fa0b4q4c.jpg" alt="img"></p><p> 另一种情况是P所分配的任务G很快就执行完了（分配不均），这就导致了一个上下文P闲着没事儿干而系统却任然忙碌。但是如果global runqueue没有任务G了，那么P就不得不从其他的上下文P那里拿一些G来执行。一般来说，如果上下文P从其他的上下文P那里要偷一个任务的话，一般就‘偷’run queue的一半，这就确保了每个OS线程都能充分的使用。 </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;文章转载自：&lt;a href=&quot;https://www.zhihu.com/question/20862617/answer/27964865&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.zhihu.com/question/20862617/answer/27964865&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文主要讲解go是如何调度runtine的，结合图形的方式，让人更加清晰明了，英文原文戳&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//morsmachine.dk/go-scheduler&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这里&lt;/a&gt;。此文作者陈诉完全翻译自&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//morsmachine.dk/go-scheduler&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;The Go scheduler&lt;/a&gt; ，感谢翻译者～&lt;/p&gt;
    
    </summary>
    
    
      <category term="golang" scheme="http://bemuler.github.io/tags/golang/"/>
    
      <category term="goroutine" scheme="http://bemuler.github.io/tags/goroutine/"/>
    
  </entry>
  
  <entry>
    <title>Goroutine背后的系统知识</title>
    <link href="http://bemuler.github.io/2018/07/22/Goroutine/"/>
    <id>http://bemuler.github.io/2018/07/22/Goroutine/</id>
    <published>2018-07-22T02:40:10.225Z</published>
    <updated>2018-07-22T04:24:45.224Z</updated>
    
    <content type="html"><![CDATA[<p>文章转载自：<a href="http://www.sizeofvoid.net/goroutine-under-the-hood/" target="_blank" rel="noopener">http://www.sizeofvoid.net/goroutine-under-the-hood/</a></p><p><a href="http://golang.org/" target="_blank" rel="noopener">Go语言</a> 从诞生到普及已经三年了，先行者大都是Web开发的背景，也有了一些普及型的书籍，可系统开发背景的人在学习这些书籍的时候，总有语焉不详的感觉，网上也有若干流传甚广的文章，可其中或多或少总有些与事实不符的技术描述。希望这篇文章能为比较缺少系统编程背景的Web开发人员介绍一下<a href="http://golang.org/doc/effective_go.html#goroutines" target="_blank" rel="noopener">goroutine</a>背后的系统知识。</p><a id="more"></a><h2 id="1、操作系统与运行库"><a href="#1、操作系统与运行库" class="headerlink" title="1、操作系统与运行库"></a>1、操作系统与运行库</h2><p>​    对于普通的电脑用户来说，能理解应用程序是运行在操作系统之上就足够了，可对于开发者，我们还需要了解我们写的程序是如何在操作系统之上运行起来的，操作系统如何为应用程序提供服务，这样我们才能分清楚哪些服务是操作系统提供的，而哪些服务是由我们所使用的语言的运行库提供的。</p><p>​    除了内存管理、文件管理、进程管理、外设管理等等内部模块以外，操作系统还提供了许多外部接口供应用程序使用，这些接口就是所谓的“系统调用”。从DOS时代开始，系统调用就是通过软中断的形式来提供，也就是著名的<a href="http://stanislavs.org/helppc/int_21.html" target="_blank" rel="noopener">INT 21</a>，程序把需要调用的功能编号放入AH寄存器，把参数放入其他指定的寄存器，然后调用INT 21，中断返回后，程序从指定的寄存器(通常是AL)里取得返回值。这样的做法一直到奔腾2也就是P6出来之前都没有变，譬如windows通过INT 2E提供系统调用，Linux则是INT 80，只不过后来的寄存器比以前大一些，而且可能再多一层跳转表查询。后来，Intel和AMD分别提供了效率更高的<a href="http://wiki.osdev.org/Sysenter" target="_blank" rel="noopener">SYSENTER/SYSEXIT和SYSCALL/SYSRET</a>指令来代替之前的中断方式，略过了耗时的特权级别检查以及寄存器压栈出栈的操作，直接完成从RING 3代码段到RING 0代码段的转换。</p><p>​    系统调用都提供什么功能呢？用操作系统的名字加上对应的中断编号到谷歌上一查就可以得到完整的列表 (<a href="http://j00ru.vexillium.org/ntapi/" target="_blank" rel="noopener">Windows</a>, <a href="http://syscalls.kernelgrok.com/" target="_blank" rel="noopener">Linux</a>)，这个列表就是操作系统和应用程序之间沟通的协议，如果需要超出此协议的功能，我们就只能在自己的代码里去实现，譬如，对于内存管理，操作系统只提供进程级别的内存段的管理，譬如Windows的<a href="http://undocumented.ntinternals.net/UserMode/Undocumented%20Functions/Memory%20Management/Virtual%20Memory/NtAllocateVirtualMemory.html" target="_blank" rel="noopener">virtualmemory</a>系列，或是Linux的<a href="http://linux.die.net/man/2/brk" target="_blank" rel="noopener">brk</a>，操作系统不会去在乎应用程序如何为新建对象分配内存，或是如何做垃圾回收，这些都需要应用程序自己去实现。如果超出此协议的功能无法自己实现，那我们就说该操作系统不支持该功能，举个例子，Linux在2.6之前是不支持多线程的，无论如何在程序里模拟，我们都无法做出多个可以同时运行的并符合POSIX 1003.1c语义标准的调度单元。</p><p>​    可是，我们写程序并不需要去调用中断或是SYSCALL指令，这是因为操作系统提供了一层封装，在Windows上，它是NTDLL.DLL，也就是常说的Native API，我们不但不需要去直接调用INT 2E或SYSCALL，准确的说，我们不能直接去调用INT 2E或SYSCALL，因为Windows并没有公开其调用规范，直接使用INT 2E或SYSCALL无法保证未来的兼容性。在Linux上则没有这个问题，系统调用的列表都是公开的，而且Linus非常看重兼容性，不会去做任何更改，glibc里甚至专门提供了<a href="http://linux.die.net/man/2/syscall" target="_blank" rel="noopener">syscall(2)</a>来方便用户直接用编号调用，不过，为了解决glibc和内核之间不同版本兼容性带来的麻烦，以及为了提高某些调用的效率(譬如__NR_ gettimeofday)，Linux上还是对部分系统调用做了一层封装，就是<a href="http://lwn.net/Articles/446528/" target="_blank" rel="noopener">VDSO</a> (早期叫<a href="http://www.trilithium.com/johan/2005/08/linux-gate/" target="_blank" rel="noopener">linux-gate.so</a>)。</p><p>​    可是，我们写程序也很少直接调用NTDLL或者VDSO，而是通过更上一层的封装，这一层处理了参数准备和返回值格式转换、以及出错处理和错误代码转换，这就是我们所使用语言的运行库，对于C语言，Linux上是glibc，Windows上是kernel32(或调用msvcrt)，对于其他语言，譬如Java，则是JRE，这些“其他语言”的运行库通常最终还是调用glibc或kernel32。</p><p>​    “运行库”这个词其实不止包括用于和编译后的目标执行程序进行链接的库文件，也包括了脚本语言或字节码解释型语言的运行环境，譬如Python，C#的CLR，Java的JRE。</p><p>​    对系统调用的封装只是运行库的很小一部分功能，运行库通常还提供了诸如字符串处理、数学计算、常用数据结构容器等等不需要操作系统支持的功能，同时，运行库也会对操作系统支持的功能提供更易用更高级的封装，譬如带缓存和格式的IO、线程池。</p><p>所以，在我们说“某某语言新增了某某功能”的时候，通常是这么几种可能：</p><ol><li>支持新的语义或语法，从而便于我们描述和解决问题。譬如Java的泛型、Annotation、lambda表达式。</li><li>提供了新的工具或类库，减少了我们开发的代码量。譬如Python 2.7的argparse</li><li>对系统调用有了更良好更全面的封装，使我们可以做到以前在这个语言环境里做不到或很难做到的事情。譬如Java NIO</li></ol><p>​    但任何一门语言，包括其运行库和运行环境，都不可能创造出操作系统不支持的功能，Go语言也是这样，不管它的特性描述看起来多么炫丽，那必然都是其他语言也可以做到的，只不过Go提供了更方便更清晰的语义和支持，提高了开发的效率。</p><h2 id="2、并发与并行-Concurrency-and-Parallelism"><a href="#2、并发与并行-Concurrency-and-Parallelism" class="headerlink" title="2、并发与并行 (Concurrency and Parallelism)"></a>2、并发与并行 (Concurrency and Parallelism)</h2><p><strong>并发</strong>是指程序的逻辑结构。非并发的程序就是一根竹竿捅到底，只有一个逻辑控制流，也就是顺序执行的(Sequential)程序，在任何时刻，程序只会处在这个逻辑控制流的某个位置。而如果某个程序有多个独立的逻辑控制流，也就是可以同时处理(deal)多件事情，我们就说这个程序是并发的。这里的“同时”，并不一定要是真正在时钟的某一时刻(那是运行状态而不是逻辑结构)，而是指：如果把这些逻辑控制流画成时序流程图，它们在时间线上是可以重叠的。</p><p><strong>并行</strong>是指程序的运行状态。如果一个程序在某一时刻被多个CPU流水线同时进行处理，那么我们就说这个程序是以并行的形式在运行。（严格意义上讲，我们不能说某程序是“并行”的，因为“并行”不是描述程序本身，而是描述程序的运行状态，但这篇小文里就不那么咬文嚼字，以下说到“并行”的时候，就是指代“以并行的形式运行”）显然，并行一定是需要硬件支持的。</p><p>而且不难理解：</p><ol><li>并发是并行的必要条件，如果一个程序本身就不是并发的，也就是只有一个逻辑控制流，那么我们不可能让其被并行处理。</li><li>并发不是并行的充分条件，一个并发的程序，如果只被一个CPU流水线进行处理(通过分时)，那么它就不是并行的。</li><li>并发只是更符合现实问题本质的表达方式，并发的最初目的是简化代码逻辑，而不是使程序运行的更快；</li></ol><p>这几段略微抽象，我们可以用一个最简单的例子来把这些概念实例化：用C语言写一个最简单的HelloWorld，它就是非并发的，如果我们建立多个线程，每个线程里打印一个HelloWorld，那么这个程序就是并发的，如果这个程序运行在老式的单核CPU上，那么这个并发程序还不是并行的，如果我们用多核多CPU且支持多任务的操作系统来运行它，那么这个并发程序就是并行的。</p><p>还有一个略微复杂的例子，更能说明并发不一定可以并行，而且并发不是为了效率，就是Go语言例子里计算素数的<a href="http://golang.org/doc/play/sieve.go" target="_blank" rel="noopener">sieve.go</a>。我们从小到大针对每一个因子启动一个代码片段，如果当前验证的数能被当前因子除尽，则该数不是素数，如果不能，则把该数发送给下一个因子的代码片段，直到最后一个因子也无法除尽，则该数为素数，我们再启动一个它的代码片段，用于验证更大的数字。这是符合我们计算素数的逻辑的，而且每个因子的代码处理片段都是相同的，所以程序非常的简洁，但它无法被并行，因为每个片段都依赖于前一个片段的处理结果和输出。</p><p>并发可以通过以下方式做到：</p><ol><li>显式地定义并触发多个代码片段，也就是逻辑控制流，由应用程序或操作系统对它们进行调度。它们可以是独立无关的，也可以是相互依赖需要交互的，譬如上面提到的素数计算，其实它也是个经典的生产者和消费者的问题：两个逻辑控制流A和B，A产生输出，当有了输出后，B取得A的输出进行处理。线程只是实现并发的其中一个手段，除此之外，运行库或是应用程序本身也有多种手段来实现并发，这是下节的主要内容。</li><li>隐式地放置多个代码片段，在系统事件发生时触发执行相应的代码片段，也就是事件驱动的方式，譬如某个端口或管道接收到了数据(多路IO的情况下)，再譬如进程接收到了某个信号(signal)。</li></ol><p>并行可以在四个层面上做到：</p><ol><li>多台机器。自然我们就有了多个CPU流水线，譬如Hadoop集群里的MapReduce任务。</li><li>多CPU。不管是真的多颗CPU还是多核还是超线程，总之我们有了多个CPU流水线。</li><li>单CPU核里的ILP(Instruction-level parallelism)，指令级并行。通过复杂的制造工艺和对指令的解析以及分支预测和乱序执行，现在的CPU可以在单个时钟周期内执行多条指令，从而，即使是非并发的程序，也可能是以并行的形式执行。</li><li>单指令多数据(Single instruction, multiple data. SIMD)，为了多媒体数据的处理，现在的CPU的指令集支持单条指令对多条数据进行操作。</li></ol><p>其中，1牵涉到分布式处理，包括数据的分布和任务的同步等等，而且是基于网络的。3和4通常是编译器和CPU的开发人员需要考虑的。这里我们说的并行主要针对第2种：单台机器内的多核CPU并行。</p><p>关于并发与并行的问题，Go语言的作者Rob Pike专门就此写过一个幻灯片：<a href="http://talks.golang.org/2012/waza.slide" target="_blank" rel="noopener">http://talks.golang.org/2012/waza.slide</a>。在CMU那本著名的《Computer Systems: A Programmer’s Perspective》里的这张图也非常直观清晰：</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1ftigdxysyrj30e804n0sy.jpg" alt="Figure 12.30  Relationships between  the sets of sequential,  concurrent, and parallel  programs.  All programs  Concurrent programs  Sequential prcgrams  parallel  programs "></p><h2 id="3、线程的调度"><a href="#3、线程的调度" class="headerlink" title="3、线程的调度"></a>3、线程的调度</h2><p>上一节主要说的是并发和并行的概念，而线程是最直观的并发的实现，这一节我们主要说操作系统如何让多个线程并发的执行，当然在多CPU的时候，也就是并行的执行。我们不讨论进程，进程的意义是“隔离的执行环境”，而不是“单独的执行序列”。</p><p>我们首先需要理解IA-32 CPU的指令控制方式，这样才能理解如何在多个指令序列(也就是逻辑控制流)之间进行切换。CPU通过CS:EIP寄存器的值确定下一条指令的位置，但是CPU并不允许直接使用MOV指令来更改EIP的值，必须通过JMP系列指令、CALL/RET指令、或INT中断指令来实现代码的跳转；在指令序列间切换的时候，除了更改EIP之外，我们还要保证代码可能会使用到的各个寄存器的值，尤其是栈指针SS:ESP，以及EFLAGS标志位等，都能够恢复到目标指令序列上次执行到这个位置时候的状态。</p><p>线程是操作系统对外提供的服务，应用程序可以通过系统调用让操作系统启动线程，并负责随后的线程调度和切换。我们先考虑单颗单核CPU，操作系统内核与应用程序其实是也是在共享同一个CPU，当EIP在应用程序代码段的时候，内核并没有控制权，内核并不是一个进程或线程，内核只是以实模式运行的，代码段权限为RING 0的内存中的程序，只有当产生中断或是应用程序呼叫系统调用的时候，控制权才转移到内核，在内核里，所有代码都在同一个地址空间，为了给不同的线程提供服务，内核会为每一个线程建立一个内核堆栈，这是线程切换的关键。通常，内核会在时钟中断里或系统调用返回前(考虑到性能，通常是在不频繁发生的系统调用返回前)，对整个系统的线程进行调度，计算当前线程的剩余时间片，如果需要切换，就在“可运行”的线程队列里计算优先级，选出目标线程后，则保存当前线程的运行环境，并恢复目标线程的运行环境，其中最重要的，就是切换堆栈指针ESP，然后再把EIP指向目标线程上次被移出CPU时的指令。Linux内核在实现线程切换时，耍了个花枪，它并不是直接JMP，而是先把ESP切换为目标线程的内核栈，把目标线程的代码地址压栈，然后JMP到<a href="http://lxr.linux.no/linux+v3.8.2/arch/x86/kernel/process_32.c#L248" target="_blank" rel="noopener">__switch_to()</a>，相当于伪造了一个CALL <strong>switch_to()指令，然后，在</strong>switch_to()的最后使用RET指令返回，这样就把栈里的目标线程的代码地址放入了EIP，接下来CPU就开始执行目标线程的代码了，其实也就是上次停在<a href="http://lxr.linux.no/linux+v3.8.2/arch/x86/include/asm/switch_to.h#L31" target="_blank" rel="noopener">switch_to</a>这个宏展开的地方。</p><p>这里需要补充几点：</p><p>(1) 虽然IA-32提供了TSS (<a href="http://en.wikipedia.org/wiki/Task_state_segment" target="_blank" rel="noopener">Task State Segment</a>)，试图简化操作系统进行线程调度的流程，但由于其效率低下，而且并不是通用标准，不利于移植，所以主流操作系统都没有去利用TSS。更严格的说，其实还是用了TSS，因为只有通过TSS才能把堆栈切换到内核堆栈指针SS0:ESP0，但除此之外的TSS的功能就完全没有被使用了。</p><p>(2) 线程从用户态进入内核的时候，相关的寄存器以及用户态代码段的EIP已经保存了一次，所以，在上面所说的内核态线程切换时，需要保存和恢复的内容并不多。</p><p>(3) 以上描述的都是抢占式(preemptively)的调度方式，内核以及其中的硬件驱动也会在等待外部资源可用的时候主动调用<a href="http://lxr.linux.no/linux+v3.8.2/kernel/sched/core.c#L2845" target="_blank" rel="noopener">schedule()</a>，用户态的代码也可以通过<a href="http://linux.die.net/man/2/sched_yield" target="_blank" rel="noopener">sched_yield()</a>系统调用主动发起调度，让出CPU。</p><p>现在我们一台普通的PC或服务里通常都有多颗CPU (physical package)，每颗CPU又有多个核 (processor core)，每个核又可以支持超线程 (two logical processors for each core)，也就是逻辑处理器。每个逻辑处理器都有自己的一套完整的寄存器，其中包括了CS:EIP和SS:ESP，从而，以操作系统和应用的角度来看，每个逻辑处理器都是一个单独的流水线。在多处理器的情况下，线程切换的原理和流程其实和单处理器时是基本一致的，内核代码只有一份，当某个CPU上发生时钟中断或是系统调用时，该CPU的CS:EIP和控制权又回到了内核，内核根据调度策略的结果进行线程切换。但在这个时候，如果我们的程序用线程实现了并发，那么操作系统可以使我们的程序在多个CPU上实现并行。</p><p>这里也需要补充两点：</p><p>(1) 多核的场景里，各个核之间并不是完全对等的，譬如在同一个核上的两个超线程是共享L1/L2缓存的；在有NUMA支持的场景里，每个核访问内存不同区域的延迟是不一样的；所以，多核场景里的线程调度又引入了“调度域”(<a href="http://lwn.net/Articles/80911/" target="_blank" rel="noopener">scheduling domains</a>)的概念，但这不影响我们理解线程切换机制。</p><p>(2) 多核的场景下，中断发给哪个CPU？软中断(包括除以0，缺页异常，INT指令)自然是在触发该中断的CPU上产生，而硬中断则又分两种情况，一种是每个CPU自己产生的中断，譬如时钟，这是每个CPU处理自己的，还有一种是外部中断，譬如IO，可以通过APIC来指定其送给哪个CPU；因为调度程序只能控制当前的CPU，所以，如果IO中断没有进行均匀的分配的话，那么和IO相关的线程就只能在某些CPU上运行，导致CPU负载不均，进而影响整个系统的效率。</p><h2 id="4、并发编程框架"><a href="#4、并发编程框架" class="headerlink" title="4、并发编程框架"></a>4、并发编程框架</h2><p>以上大概介绍了一个用多线程来实现并发的程序是如何被操作系统调度以及并行执行(在有多个逻辑处理器时)，同时大家也可以看到，代码片段或者说逻辑控制流的调度和切换其实并不神秘，理论上，我们也可以不依赖操作系统和其提供的线程，在自己程序的代码段里定义多个片段，然后在我们自己程序里对其进行调度和切换。</p><p>为了描述方便，我们接下来把“代码片段”称为“任务”。</p><p>和内核的实现类似，只是我们不需要考虑中断和系统调用，那么，我们的程序本质上就是一个循环，这个循环本身就是调度程序schedule()，我们需要维护一个任务的列表，根据我们定义的策略，先进先出或是有优先级等等，每次从列表里挑选出一个任务，然后恢复各个寄存器的值，并且JMP到该任务上次被暂停的地方，所有这些需要保存的信息都可以作为该任务的属性，存放在任务列表里。</p><p>看起来很简单啊，可是我们还需要解决几个问题：</p><p>(1) 我们运行在用户态，是没有中断或系统调用这样的机制来打断代码执行的，那么，一旦我们的schedule()代码把控制权交给了任务的代码，我们下次的调度在什么时候发生？答案是，不会发生，只有靠任务主动调用schedule()，我们才有机会进行调度，所以，这里的任务不能像线程一样依赖内核调度从而毫无顾忌的执行，我们的任务里一定要显式的调用schedule()，这就是所谓的协作式(cooperative)调度。(虽然我们可以通过注册信号处理函数来模拟内核里的时钟中断并取得控制权，可问题在于，信号处理函数是由内核调用的，在其结束的时候，内核重新获得控制权，随后返回用户态并继续沿着信号发生时被中断的代码路径执行，从而我们无法在信号处理函数内进行任务切换)</p><p>(2) 堆栈。和内核调度线程的原理一样，我们也需要为每个任务单独分配堆栈，并且把其堆栈信息保存在任务属性里，在任务切换时也保存或恢复当前的SS:ESP。任务堆栈的空间可以是在当前线程的堆栈上分配，也可以是在堆上分配，但通常是在堆上分配比较好：几乎没有大小或任务总数的限制、堆栈大小可以动态扩展(gcc有split stack，但太复杂了)、便于把任务切换到其他线程。</p><p>到这里，我们大概知道了如何构造一个并发的编程框架，可如何让任务可以并行的在多个逻辑处理器上执行呢？只有内核才有调度CPU的权限，所以，我们还是必须通过系统调用创建线程，才可以实现并行。在多线程处理多任务的时候，我们还需要考虑几个问题：</p><p>(1) 如果某个任务发起了一个系统调用，譬如长时间等待IO，那当前线程就被内核放入了等待调度的队列，岂不是让其他任务都没有机会执行？</p><p>在单线程的情况下，我们只有一个解决办法，就是使用非阻塞的IO系统调用，并让出CPU，然后在schedule()里统一进行轮询，有数据时切换回该fd对应的任务；效率略低的做法是不进行统一轮询，让各个任务在轮到自己执行时再次用非阻塞方式进行IO，直到有数据可用。</p><p>如果我们采用多线程来构造我们整个的程序，那么我们可以封装系统调用的接口，当某个任务进入系统调用时，我们就把当前线程留给它(暂时)独享，并开启新的线程来处理其他任务。</p><p>(2) 任务同步。譬如我们上节提到的生产者和消费者的例子，如何让消费者在数据还没有被生产出来的时候进入等待，并且在数据可用时触发消费者继续执行呢？</p><p>在单线程的情况下，我们可以定义一个结构，其中有变量用于存放交互数据本身，以及数据的当前可用状态，以及负责读写此数据的两个任务的编号。然后我们的并发编程框架再提供read和write方法供任务调用，在read方法里，我们循环检查数据是否可用，如果数据还不可用，我们就调用schedule()让出CPU进入等待；在write方法里，我们往结构里写入数据，更改数据可用状态，然后返回；在schedule()里，我们检查数据可用状态，如果可用，则激活需要读取此数据的任务，该任务继续循环检测数据是否可用，发现可用，读取，更改状态为不可用，返回。代码的简单逻辑如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">chan</span> &#123;</span></span><br><span class="line">     <span class="keyword">bool</span> ready,</span><br><span class="line">     <span class="keyword">int</span> data</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span> <span class="params">(struct chan *c)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">         <span class="keyword">if</span> (c-&gt;ready) &#123;</span><br><span class="line">             c-&gt;ready = <span class="literal">false</span>;</span><br><span class="line">             <span class="keyword">return</span> c-&gt;data;</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             schedule();</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span> <span class="params">(struct chan *c, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">         <span class="keyword">if</span> (c-&gt;ready) &#123;</span><br><span class="line">             schedule(); </span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             c-&gt;data = i;</span><br><span class="line">             c-&gt;ready = <span class="literal">true</span>;</span><br><span class="line">             schedule(); <span class="comment">// optional</span></span><br><span class="line">             <span class="keyword">return</span>;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很显然，如果是多线程的话，我们需要通过线程库或系统调用提供的同步机制来保护对这个结构体内数据的访问。</p><p>以上就是最简化的一个并发框架的设计考虑，在我们实际开发工作中遇到的并发框架可能由于语言和运行库的不同而有所不同，在功能和易用性上也可能各有取舍，但底层的原理都是殊途同归。</p><p>譬如，glic里的<a href="http://linux.die.net/man/3/swapcontext" target="_blank" rel="noopener">getcontext/setcontext/swapcontext</a>系列库函数可以方便的用来保存和恢复任务执行状态；Windows提供了Fiber系列的SDK API；这二者都不是系统调用，<a href="http://linux.die.net/man/2/getcontext" target="_blank" rel="noopener">getcontext和setcontext</a>的man page虽然是在section 2，但那只是SVR4时的历史遗留问题，其实现代码是在glibc而不是kernel；<a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms682402(v=vs.85" target="_blank" rel="noopener">CreateFiber</a>.aspx)是在kernel32里提供的，NTDLL里并没有对应的NtCreateFiber。</p><p>在其他语言里，我们所谓的“任务”更多时候被称为“协程”，也就是Coroutine。譬如C++里最常用的是Boost.Coroutine；Java因为有一层字节码解释，比较麻烦，但也有支持协程的JVM补丁，或是动态修改字节码以支持协程的项目；PHP和Python的generator和yield其实已经是协程的支持，在此之上可以封装出更通用的协程接口和调度；另外还有原生支持协程的Erlang等，笔者不懂，就不说了，具体可参见Wikipedia的页面：<a href="http://en.wikipedia.org/wiki/Coroutine" target="_blank" rel="noopener">http://en.wikipedia.org/wiki/Coroutine</a></p><p>由于保存和恢复任务执行状态需要访问CPU寄存器，所以相关的运行库也都会列出所支持的CPU列表。</p><p>从操作系统层面提供协程以及其并行调度的，好像只有OS X和iOS的<a href="http://developer.apple.com/library/ios/#documentation/Performance/Reference/GCD_libdispatch_Ref/Reference/reference.html" target="_blank" rel="noopener">Grand Central Dispatch</a>，其大部分功能也是在运行库里实现的。</p><h2 id="5、goroutine"><a href="#5、goroutine" class="headerlink" title="5、goroutine"></a>5、goroutine</h2><p>Go语言通过goroutine提供了目前为止所有(我所了解的)语言里对于并发编程的最清晰最直接的支持，Go语言的文档里对其特性也描述的非常全面甚至超过了，在这里，基于我们上面的系统知识介绍，列举一下goroutine的特性，算是小结：</p><p>(1) goroutine是Go语言运行库的功能，不是操作系统提供的功能，goroutine不是用线程实现的。具体可参见Go语言源码里的<a href="http://golang.org/src/pkg/runtime/proc.c" target="_blank" rel="noopener">pkg/runtime/proc.c</a></p><p>(2) goroutine就是一段代码，一个函数入口，以及在堆上为其分配的一个堆栈。所以它非常廉价，我们可以很轻松的创建上万个goroutine，但它们并不是被操作系统所调度执行</p><p>(3) 除了被系统调用阻塞的线程外，Go运行库最多会启动$GOMAXPROCS个线程来运行goroutine</p><p>(4) goroutine是协作式调度的，如果goroutine会执行很长时间，而且不是通过等待读取或写入channel的数据来同步的话，就需要主动调用<a href="http://golang.org/pkg/runtime/#Gosched" target="_blank" rel="noopener">Gosched()</a>来让出CPU</p><p>(5) 和所有其他并发框架里的协程一样，goroutine里所谓“无锁”的优点只在单线程下有效，如果$GOMAXPROCS &gt; 1并且协程间需要通信，Go运行库会负责加锁保护数据，这也是为什么sieve.go这样的例子在多CPU多线程时反而更慢的原因</p><p>(6) Web等服务端程序要处理的请求从本质上来讲是并行处理的问题，每个请求基本独立，互不依赖，几乎没有数据交互，这不是一个并发编程的模型，而并发编程框架只是解决了其语义表述的复杂性，并不是从根本上提高处理的效率，也许是并发连接和并发编程的英文都是concurrent吧，很容易产生“并发编程框架和coroutine可以高效处理大量并发连接”的误解。</p><p>(7) Go语言运行库封装了异步IO，所以可以写出貌似并发数很多的服务端，可即使我们通过调整$GOMAXPROCS来充分利用多核CPU并行处理，其效率也不如我们利用IO事件驱动设计的、按照事务类型划分好合适比例的线程池。在响应时间上，协作式调度是硬伤。</p><p>(8) goroutine最大的价值是其实现了并发协程和实际并行执行的线程的映射以及动态扩展，随着其运行库的不断发展和完善，其性能一定会越来越好，尤其是在CPU核数越来越多的未来，终有一天我们会为了代码的简洁和可维护性而放弃那一点点性能的差别。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;文章转载自：&lt;a href=&quot;http://www.sizeofvoid.net/goroutine-under-the-hood/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.sizeofvoid.net/goroutine-under-the-hood/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://golang.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Go语言&lt;/a&gt; 从诞生到普及已经三年了，先行者大都是Web开发的背景，也有了一些普及型的书籍，可系统开发背景的人在学习这些书籍的时候，总有语焉不详的感觉，网上也有若干流传甚广的文章，可其中或多或少总有些与事实不符的技术描述。希望这篇文章能为比较缺少系统编程背景的Web开发人员介绍一下&lt;a href=&quot;http://golang.org/doc/effective_go.html#goroutines&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;goroutine&lt;/a&gt;背后的系统知识。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Golang" scheme="http://bemuler.github.io/tags/Golang/"/>
    
      <category term="routine" scheme="http://bemuler.github.io/tags/routine/"/>
    
  </entry>
  
  <entry>
    <title>Golang基础语法</title>
    <link href="http://bemuler.github.io/2018/07/21/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    <id>http://bemuler.github.io/2018/07/21/Go基础语法/</id>
    <published>2018-07-21T14:33:58.645Z</published>
    <updated>2018-07-22T04:24:34.747Z</updated>
    
    <content type="html"><![CDATA[<p>本文基于GO官网上的例子写就，主要帮助自己在学习go语言的过程中记忆，更多的是自己对其中一些概念的理解。</p><a id="more"></a><h2 id="1-1-Go基础语法"><a href="#1-1-Go基础语法" class="headerlink" title="1.1 Go基础语法"></a>1.1 Go基础语法</h2><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>函数声明关键字func，包括函数名、参数列表（参数名 参数类型）、函数返回值，（需要指明返回类型，可以指定返回变量名）。具体格式如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">funcName</span><span class="params">(a , b <span class="keyword">int</span>)</span> <span class="params">(sum <span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line">sum = a + b</span><br><span class="line"><span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><p> <strong>int、int8、int16、int32、int64、uint、uint8、uint16、uint32、uint64、 uintptr 、byte（int8）、rune（int32）、float32、float64、complex64、complex128、 string、 bool</strong> </p><p>int，uint 和 uintptr 类型在32位的系统上一般是32位，而在64位系统上是64位。当你需要使用一个整数类型时，你应该首选 int，仅当有特别的理由才使用定长整数类型或者无符号整数类型。</p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>变量声明采用<strong>var</strong>关键字，如果声明时指定了初始值，则可以不写变量类型：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name <span class="keyword">string</span> = <span class="string">"xxx"</span></span><br></pre></td></tr></table></figure><p>或短变量声明，在函数中， := 简洁赋值语句在明确类型的地方，可以用于替代 var 定义。函数外的每个语句都必须以关键字开始（ var 、 func 、等等）， := 结构不能使用在函数外。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name := <span class="string">"xxx"</span></span><br></pre></td></tr></table></figure><p>var 语句定义了一个变量的列表；跟函数的参数列表一样，类型在后面。 var 语句可以定义在包或函数级别。</p><h3 id="循环for"><a href="#循环for" class="headerlink" title="循环for"></a>循环for</h3><p>Go中只有一种for循环，基本的 for 循环包含三个由分号分开的组成部分：</p><ul><li>初始化语句：在第一次循环执行前被执行</li><li>循环条件表达式：每轮迭代开始前被求值</li><li>后置语句：每轮迭代后被执行</li></ul><p>且循环条件不能有圆括号，循环体需要大括号，其语法如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sum :=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++ &#123;</span><br><span class="line">sum++</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果前置条件、后置条件和分号都去掉，这就退化为C语言中的while循环了，语法如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sum := <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> sum &lt; <span class="number">100</span> &#123;</span><br><span class="line">    sum++</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="条件if"><a href="#条件if" class="headerlink" title="条件if"></a>条件if</h3><p>Go中的if语句同循环一样，不需要圆括号，具体执行语句需要大括号，其语法如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> i &lt; <span class="number">10</span> &#123;</span><br><span class="line"><span class="comment">//todo something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="if-的便捷语句"><a href="#if-的便捷语句" class="headerlink" title="if 的便捷语句"></a>if 的便捷语句</h4><p>跟 for 一样， if 语句可以在条件之前执行一个简单语句。</p><p>由这个语句定义的变量的作用域仅在 if 范围之内。包括在 if 的便捷语句定义的变量同样可以在任何对应的 else 块中使用。</p><h3 id="包的定义"><a href="#包的定义" class="headerlink" title="包的定义"></a>包的定义</h3><p>package是golang最基本的分发单位和工程管理中依赖关系的体现。每个golang源代码文件开头都拥有一个package声明，表示该golang代码所属的package。</p><p>要生成golang可执行程序，必须建立一个名为<strong>main</strong>的package，并且在该package中必须包含一个名为<strong>main()</strong>的函数。</p><p>在golang工程中，同一个路径下只能存在一个package，一个package可以拆成多个源文件组成</p><p>按照惯例，包名与导入路径的最后一个目录一致。</p><h3 id="包的导入"><a href="#包的导入" class="headerlink" title="包的导入"></a>包的导入</h3><p>包的导入使用import关键字</p><p>例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="comment">//或者使用打包的导入语句</span></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"math"</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="导出名"><a href="#导出名" class="headerlink" title="导出名"></a>导出名</h3><p>在 Go 中，首字母大写的名称是被导出的。</p><p>在导入包之后，你只能访问包所导出的名字，任何未导出的名字是不能被包外的代码访问的。</p><p>Foo 和 FOO 都是被导出的名称。名称 foo 是不会被导出的。</p><h3 id="零值"><a href="#零值" class="headerlink" title="零值"></a>零值</h3><p>变量在定义时没有明确的初始化时会赋值为零值 。</p><p>零值是：</p><ol><li>数值类型为 0 ，</li><li>布尔类型为 false ，</li><li>字符串为 “” （空字符串）。</li></ol><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p>表达式 T(v) 将值 v 转换为类型 T 。</p><p>一些关于数值的转换例子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i <span class="keyword">int</span> = <span class="number">42</span></span><br><span class="line"><span class="keyword">var</span> f <span class="keyword">float64</span> = <span class="keyword">float64</span>(i)</span><br><span class="line"><span class="keyword">var</span> u <span class="keyword">uint</span> = <span class="keyword">uint</span>(f)</span><br><span class="line"><span class="comment">//或者，更加简单的形式：</span></span><br><span class="line">i := <span class="number">42</span></span><br><span class="line">f := <span class="keyword">float64</span>(i)</span><br><span class="line">u := <span class="keyword">uint</span>(f)</span><br></pre></td></tr></table></figure><p>与 C 不同的是 Go 的在不同类型之间的赋值时需要显式转换。</p><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>常量的定义与变量类似，只不过使用 const 关键字。</p><p>常量可以是字符、字符串、布尔或数字类型的值。</p><p>常量不能使用 := 语法定义。</p><h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><p>你可能已经知道 switch 语句会长什么样了。</p><p>除非以 fallthrough 语句结束，否则分支会自动终止。</p><p>switch 的条件从上到下的执行，当匹配成功的时候停止。</p><p>没有条件的 switch</p><p>没有条件的 switch 同 switch true 一样。</p><p>这一构造使得可以用更清晰的形式来编写长的 if-then-else 链。</p><h3 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h3><p>defer 语句会延迟函数的执行直到上层函数返回。</p><p>延迟调用的参数会立刻生成，但是在上层函数返回前函数都不会被调用。</p><h3 id="defer栈"><a href="#defer栈" class="headerlink" title="defer栈"></a>defer栈</h3><p>延迟的函数调用被压入一个栈中。当函数返回时， 会按照后进先出的顺序调用被延迟的函数调用。</p><h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><p>Go 具有指针。 指针保存了变量的内存地址。</p><p>类型 *T 是指向类型 T 的值的指针。其零值是 nil 。&amp; 符号会生成一个指向其作用对象的指针。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p *<span class="keyword">int</span></span><br><span class="line">i := <span class="number">42</span></span><br><span class="line">p = &amp;i</span><br></pre></td></tr></table></figure><ul><li>符号表示指针指向的底层的值。</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fmt.Println(*p) <span class="comment">// 通过指针 p 读取 i</span></span><br><span class="line">*p = <span class="number">21</span>         <span class="comment">// 通过指针 p 设置 i</span></span><br></pre></td></tr></table></figure><p>这也就是通常所说的“间接引用”或“非直接引用”。</p><p><strong>与 C 不同，Go 没有指针运算。</strong></p><h3 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h3><p>一个结构体（ struct ）就是一个字段的集合。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="keyword">type</span> Vertex <span class="keyword">struct</span> &#123;</span><br><span class="line">X <span class="keyword">int</span></span><br><span class="line">Y <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(Vertex&#123;<span class="number">1</span>, <span class="number">2</span>&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结构体字段使用点号来访问。</p><p>结构体字段可以通过结构体指针来访问。</p><p>通过指针间接的访问是透明的。</p><h3 id="结构体文法"><a href="#结构体文法" class="headerlink" title="结构体文法"></a>结构体文法</h3><p>结构体文法表示通过结构体字段的值作为列表来新分配一个结构体。</p><p>使用 Name: 语法可以仅列出部分字段。（字段名的顺序无关。）</p><p>特殊的前缀 &amp; 返回一个指向结构体的指针。 </p><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>类型 [n]T 是一个有 n 个类型为 T 的值的数组。</p><p>下面表达式定义变量 a 是一个有十个整数的数组。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a [<span class="number">10</span>]<span class="keyword">int</span></span><br></pre></td></tr></table></figure><p>数组的长度是其类型的一部分，因此数组不能改变大小。 这看起来是一个制约，但是请不要担心； Go 提供了更加便利的方式来使用数组。</p><h4 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h4><p>一个 slice 会指向一个序列的值，并且包含了长度信息。</p><p>[]T 是一个元素类型为 T 的 slice。</p><p>len(s) 返回 slice s 的长度。</p><p>slice 可以包含任意的类型，包括另一个 slice。</p><h4 id="对-slice-切片"><a href="#对-slice-切片" class="headerlink" title="对 slice 切片"></a>对 slice 切片</h4><p>slice 可以重新切片，创建一个新的 slice 值指向相同的数组。</p><p>如表达式：s[lo:hi]，表示从 lo 到 hi-1 的 slice 元素，含前端，不包含后端。因此 s[lo:lo]是空的，而s[lo:lo+1]有一个元素。</p><h4 id="构造-slice"><a href="#构造-slice" class="headerlink" title="构造 slice"></a>构造 slice</h4><p>slice 由函数 <strong>make</strong> 创建。这会分配一个全是零值的数组并且返回一个 slice 指向这个数组：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">5</span>)  <span class="comment">// len(a)=5</span></span><br></pre></td></tr></table></figure><p>为了指定容量，可传递第三个参数到 make：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">b := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">0</span>, <span class="number">5</span>) <span class="comment">// len(b)=0, cap(b)=5</span></span><br><span class="line">b = b[:<span class="built_in">cap</span>(b)] <span class="comment">// len(b)=5, cap(b)=5</span></span><br><span class="line">b = b[<span class="number">1</span>:] <span class="comment">// len(b)=4, cap(b)=4</span></span><br></pre></td></tr></table></figure><h4 id="slice-的零值是-nil"><a href="#slice-的零值是-nil" class="headerlink" title="slice 的零值是 nil"></a>slice 的零值是 nil</h4><p>一个 nil 的 slice 的长度和容量是 0。</p><h4 id="向-slice-添加元素"><a href="#向-slice-添加元素" class="headerlink" title="向 slice 添加元素"></a>向 slice 添加元素</h4><p>向 slice 的末尾添加元素是一种常见的操作，因此 Go 提供了一个内建函数 <strong>append</strong> 。 内建函数的<a href="https://go-zh.org/pkg/builtin/#append" target="_blank" rel="noopener">文档</a>对 append 有详细介绍。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">append</span><span class="params">(s []T, vs ...T)</span> []<span class="title">T</span></span></span><br></pre></td></tr></table></figure><p>append 的第一个参数 s 是一个元素类型为 T 的 slice ，其余类型为 T 的值将会附加到该 slice 的末尾。</p><p>append 的结果是一个包含原 slice 所有元素加上新添加的元素的 slice。</p><p>如果 s 的底层数组太小，而不能容纳所有值时，会分配一个更大的数组。 返回的 slice 会指向这个新分配的数组。</p><h3 id="range"><a href="#range" class="headerlink" title="range"></a>range</h3><p>for 循环的 range 格式可以对 slice 或者 map 进行迭代循环。</p><p>当使用 for 循环遍历一个 slice 时，每次迭代 range 将返回两个值。 第一个是当前下标（序号），第二个是该下标所对应元素的一个拷贝。</p><p>可以通过赋值给 _ 来忽略序号和值。</p><p>如果只需要索引值，去掉 “ , value ” 的部分即可。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    pow := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">10</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="keyword">range</span> pow &#123;</span><br><span class="line">    pow[i] = <span class="number">1</span> &lt;&lt; <span class="keyword">uint</span>(i)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> _, value := <span class="keyword">range</span> pow &#123;</span><br><span class="line">        fmt.Printf(<span class="string">"%d\n"</span>, value)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p>map 映射键到值。</p><p>map 在使用之前必须用 <strong>make</strong> 来创建；</p><p>值为 nil 的 map 是空的，并且不能对其赋值。</p><p>map 的文法跟结构体文法相似，不过必须有键名。</p><p>若顶级类型只是一个类型名，你可以在文法的元素中省略它。</p><h4 id="修改-map"><a href="#修改-map" class="headerlink" title="修改 map"></a>修改 map</h4><p>在 map m 中插入或修改一个元素：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> m = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>)</span><br><span class="line">m[<span class="string">"name"</span>] = <span class="string">"Golang"</span></span><br></pre></td></tr></table></figure><p>获得元素：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name := m[<span class="string">"name"</span>]</span><br></pre></td></tr></table></figure><p>删除元素：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">delete</span>(m, <span class="string">"name"</span>)</span><br></pre></td></tr></table></figure><p>通过双赋值检测某个键存在：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name, ok = m[<span class="string">"name"</span>]</span><br></pre></td></tr></table></figure><p>如果 name 在 m 中， ok 为 true。否则， ok 为 false，并且 name 是 map 的元素类型的零值。</p><p>同样的，当从 map 中读取某个不存在的键时，结果是 map 的元素类型的零值。</p><h3 id="函数值"><a href="#函数值" class="headerlink" title="函数值"></a>函数值</h3><p>函数也是值。他们可以像其他值一样传递，比如，函数值可以作为函数的参数或者返回值。</p><h3 id="函数的闭包"><a href="#函数的闭包" class="headerlink" title="函数的闭包"></a>函数的闭包</h3><p>Go 函数可以是一个闭包。闭包是一个函数值，它引用了函数体之外的变量。 这个函数可以对这个引用的变量进行访问和赋值；换句话说这个函数被“绑定”在这个变量上。</p><p>例如，函数 adder 返回一个闭包。每个返回的闭包都被绑定到其各自的 sum 变量上。</p><p>练习：斐波纳契闭包</p><p>现在来通过函数做些有趣的事情。</p><p>实现一个 fibonacci 函数，返回一个函数（一个闭包）可以返回连续的斐波纳契数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// fibonacci 函数会返回一个返回 int 的函数。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fibonacci</span><span class="params">()</span> <span class="title">func</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    first := <span class="number">0</span></span><br><span class="line">    second := <span class="number">0</span></span><br><span class="line">    index :=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">int</span></span>&#123;</span><br><span class="line">        sum := first + second</span><br><span class="line">        <span class="keyword">switch</span> index &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        first = <span class="number">0</span></span><br><span class="line">        second = <span class="number">1</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        first = <span class="number">0</span></span><br><span class="line">        second = <span class="number">1</span></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">        first = second</span><br><span class="line">        second = sum</span><br><span class="line">        &#125;</span><br><span class="line">        index++</span><br><span class="line">        <span class="keyword">return</span> sum</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    f := fibonacci()</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">    fmt.Printf(<span class="string">"[%v]=&gt;%v\n"</span>,i,f())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>Go 没有类。然而，仍然可以在结构体类型上定义方法。</p><p>方法接收者 出现在 func 关键字和方法名之间的参数中。格式为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(变量 类型)</span> <span class="title">funcName</span><span class="params">(param1 type1,param2 type2)</span><span class="params">(return_param, return_type)</span></span> &#123;</span><br><span class="line"><span class="comment">//xxx</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你可以对包中的 <strong>任意</strong> 类型定义任意方法，而不仅仅是针对结构体。</p><p>但是，不能对来自其他包的类型或基础类型定义方法。</p><h4 id="接收者为指针的方法"><a href="#接收者为指针的方法" class="headerlink" title="接收者为指针的方法"></a>接收者为指针的方法</h4><p>方法可以与命名类型或命名类型的指针关联。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Vertex <span class="keyword">struct</span> &#123;</span><br><span class="line">X, Y <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v *Vertex)</span> <span class="title">Scale</span><span class="params">(f <span class="keyword">float64</span>)</span></span> &#123;</span><br><span class="line">v.X = v.X * f</span><br><span class="line">v.Y = v.Y * f</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v *Vertex)</span> <span class="title">Abs</span><span class="params">()</span> <span class="title">float64</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> math.Sqrt(v.Xv.X + v.Yv.Y)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">v := &amp;Vertex&#123;<span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">fmt.Printf(<span class="string">"Before scaling: %+v, Abs: %v\n"</span>, v, v.Abs())</span><br><span class="line">v.Scale(<span class="number">5</span>)</span><br><span class="line">fmt.Printf(<span class="string">"After scaling: %+v, Abs: %v\n"</span>, v, v.Abs())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>刚刚看到的两个 Abs 方法。一个是在 *Vertex 指针类型上，而另一个在 MyFloat 值类型上。 有两个原因需要使用指针接收者。首先避免在每个方法调用中拷贝值（如果值类型是大的结构体的话会更有效率）。其次，方法可以修改接收者指向的值。</p><p>尝试修改 Abs 的定义，同时 Scale 方法使用 Vertex 代替 *Vertex 作为接收者。</p><p>当 v 是 Vertex 的时候 Scale 方法没有任何作用。Scale 修改 v。当 v 是一个值（非指针），方法看到的是 Vertex 的副本，并且无法修改原始值。</p><p>Abs 的工作方式是一样的。只不过，仅仅读取 v。所以读取的是原始值（通过指针）还是那个值的副本并没有关系。</p><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>接口类型是由一组方法定义的集合。</p><p>接口类型的值可以存放实现这些方法的任何值</p><h4 id="接口定义"><a href="#接口定义" class="headerlink" title="接口定义"></a>接口定义</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Abser <span class="keyword">interface</span> &#123;</span><br><span class="line">Abs() <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="接口实现"><a href="#接口实现" class="headerlink" title="接口实现"></a>接口实现</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MyFloat <span class="keyword">float64</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f MyFloat)</span> <span class="title">Abs</span><span class="params">()</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> f &lt; <span class="number">0</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">float64</span>(-f)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">float64</span>(f)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="隐式接口"><a href="#隐式接口" class="headerlink" title="隐式接口"></a>隐式接口</h4><p>类型通过实现接口中的方法来实现接口。 没有显式声明的必要；所以也就没有关键字“implement“。</p><p>隐式接口解藕了实现接口的包和定义接口的包：互不依赖。</p><p>因此，也就无需在每一个实现上增加新的接口名称，这样同时也鼓励了明确的接口定义。</p><h4 id="Stringers"><a href="#Stringers" class="headerlink" title="Stringers"></a>Stringers</h4><p>一个普遍存在的接口是 <a href="https://go-zh.org/pkg/fmt/" target="_blank" rel="noopener">fmt</a> 包中定义的 <a href="https://go-zh.org/pkg/fmt/#Stringer" target="_blank" rel="noopener">Stringer</a>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Stringer <span class="keyword">interface</span> &#123;</span><br><span class="line">     String() <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Stringer 是一个可以用字符串描述自己的类型。<code>fmt</code>包 （还有许多其他包）使用这个来进行输出。</p><h3 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h3><p>Go 程序使用 error 值来表示错误状态。</p><p>与 fmt.Stringer 类似， error 类型是一个内建接口：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> error <span class="keyword">interface</span> &#123;</span><br><span class="line">     Error() <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（与 fmt.Stringer 类似，fmt 包在输出时也会试图匹配 error。）</p><p>通常函数会返回一个 error 值，调用的它的代码应当判断这个错误是否等于 nil， 来进行错误处理。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">i, err := strconv.Atoi(<span class="string">"42"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">"couldn't convert number: %v\n"</span>, err)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"Converted integer:"</span>, i)</span><br></pre></td></tr></table></figure><p>error 为 nil 时表示成功；非 nil 的 error 表示错误。</p><p>示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ErrNegativeSqrt <span class="keyword">float64</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e ErrNegativeSqrt)</span> <span class="title">Error</span><span class="params">()</span> <span class="title">string</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> e &lt; <span class="number">0</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> fmt.Sprintf(<span class="string">"cannot Sqrt negative number:%v"</span>,<span class="keyword">float64</span>(e))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Sqrt</span><span class="params">(x <span class="keyword">float64</span>)</span> <span class="params">(<span class="keyword">float64</span>, error)</span></span> &#123;</span><br><span class="line">    i := ErrNegativeSqrt(x)</span><br><span class="line">    <span class="keyword">if</span> i &lt; <span class="number">0</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>, i</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> math.Sqrt(x),<span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(Sqrt(<span class="number">2</span>))</span><br><span class="line">fmt.Println(Sqrt(<span class="number">-2</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Readers"><a href="#Readers" class="headerlink" title="Readers"></a>Readers</h3><p>io 包指定了 io.Reader 接口， 它表示从数据流结尾读取。</p><p>Go 标准库包含了这个接口的<a href="https://go-zh.org/search?q=Read#Global" target="_blank" rel="noopener">许多实现</a>， 包括文件、网络连接、压缩、加密等等。</p><p>io.Reader 接口有一个 Read 方法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(T)</span> <span class="title">Read</span><span class="params">(b []<span class="keyword">byte</span>)</span> <span class="params">(n <span class="keyword">int</span>, err error)</span></span></span><br></pre></td></tr></table></figure><p>Read 用数据填充指定的字节 slice，并且返回填充的字节数和错误信息。 在遇到数据流结尾时，返回 io.EOF 错误。</p><p>例子代码创建了一个 <a href="https://go-zh.org/pkg/strings/#Reader" target="_blank" rel="noopener">strings.Reader</a>。 并且以每次 8 字节的速度读取它的输出。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    r := strings.NewReader(<span class="string">"Hello, Reader!"</span>)</span><br><span class="line">    b := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">8</span>)</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        n, err := r.Read(b)</span><br><span class="line">        fmt.Printf(<span class="string">"n = %v err = %v b = %v\n"</span>, n, err, b)</span><br><span class="line">        fmt.Printf(<span class="string">"b[:n] = %q\n"</span>, b[:n])</span><br><span class="line">        <span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文基于GO官网上的例子写就，主要帮助自己在学习go语言的过程中记忆，更多的是自己对其中一些概念的理解。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Golang" scheme="http://bemuler.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>LNMP环境解说</title>
    <link href="http://bemuler.github.io/2018/07/19/LNMP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://bemuler.github.io/2018/07/19/LNMP环境搭建/</id>
    <published>2018-07-19T03:59:48.526Z</published>
    <updated>2018-07-22T04:25:37.454Z</updated>
    
    <content type="html"><![CDATA[<p>​    作为一个PHPer，没有手动搭过几次LNMP环境，都不算是一个真正的PHPer。此文主要以实际着手搭建一套lnmp环境为主线，介绍其中涉及到的技术点。包括php配置、php-fpm配置、nginx配置、mysql配置。以及这他们之间的关系。</p><a id="more"></a><h2 id="2-准备工作"><a href="#2-准备工作" class="headerlink" title="2 准备工作"></a>2 准备工作</h2><h3 id="2-1-软件下载"><a href="#2-1-软件下载" class="headerlink" title="2.1 软件下载"></a>2.1 软件下载</h3><ol><li>Linux: CentOS6.5</li><li>Nginx: 1.13.4，下载地址：<a href="http://nginx.org/download/nginx-1.13.4.tar.gz" target="_blank" rel="noopener">http://nginx.org/download/nginx-1.13.4.tar.gz</a></li><li>Mysql: 5.6.37，下载地址：<a href="https://dev.mysql.com/get/Downloads/MySQL-5.6/mysql-5.6.37.tar.gz" target="_blank" rel="noopener">https://dev.mysql.com/get/Downloads/MySQL-5.6/mysql-5.6.37.tar.gz</a></li><li>PHP: 5.5.38，下载地址：<a href="http://cn2.php.net/distributions/php-5.5.38.tar.gz" target="_blank" rel="noopener">http://cn2.php.net/distributions/php-5.5.38.tar.gz</a></li></ol><p>在/usr/local目录下创建我们的LNMP安装目录，我们这里定义为lnmp。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /usr/<span class="built_in">local</span>/lnmp/src</span><br><span class="line">wget -P /usr/<span class="built_in">local</span>/lnmp/src http://nginx.org/download/nginx-1.13.4.tar.gz</span><br><span class="line">wget -P /usr/<span class="built_in">local</span>/lnmp/src https://github.com/mysql/mysql-server/archive/mysql-5.6.37.tar.gz</span><br><span class="line">wget -P /usr/<span class="built_in">local</span>/lnmp/src http://cn2.php.net/distributions/php-5.5.38.tar.gz</span><br></pre></td></tr></table></figure><p>为了方便知道我们安装的软件版本，故目录命名均采用软件名-三位版本号的形式：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir /usr/<span class="built_in">local</span>/lnmp/php-5.5.38</span><br><span class="line">mkdir /usr/<span class="built_in">local</span>/lnmp/mysql-5.6.37</span><br><span class="line">mkdir /usr/<span class="built_in">local</span>/lnmp/nginx-1.10.3</span><br></pre></td></tr></table></figure><h3 id="2-2-工具安装"><a href="#2-2-工具安装" class="headerlink" title="2.2 工具安装"></a>2.2 工具安装</h3><p>​    本实验所有的安装都是根据源码进行编译安装，编译此三软件，需要使用到的工具有:</p><p><strong>cmake</strong></p><p>​    cmake是一款开源跨平台的编译工具，其包含编译构建、测试打包等一体的工具包。其<a href="https://cmake.org/" target="_blank" rel="noopener">官网</a>。mysql官方文档记载说mysql 5.6版本源码编译安装需要使用cmake。其下载地址：<a href="https://cmake.org/files/v3.9/cmake-3.9.1.tar.gz" target="_blank" rel="noopener">https://cmake.org/files/v3.9/cmake-3.9.1.tar.gz</a> ，当然，我们也可以去github：<a href="https://github.com/Kitware/CMake/archive/v3.9.1.tar.gz" target="_blank" rel="noopener">https://github.com/Kitware/CMake/archive/v3.9.1.tar.gz</a> ，这里也提醒大家，所有开源软件基本都可以在github上找到，开源的世界就是这么好。感恩！</p><p><strong>GCC(version &gt;= 4.2.1)</strong></p><p>​    作为RD应该都听说过GCC（the GNU Compiler Collection），即GNU编译套件集合，是由 GNU 开发的编程语言编译器。它是以<a href="https://baike.baidu.com/item/GPL" target="_blank" rel="noopener">GPL</a>许可证所发行的自由软件。其包括C、C++、Objective-C、Fortran、Java、Ada和Go语言的前端，也包括了这些语言的库（如libstdc++、libgcj等等）。GCC的初衷是为GNU操作系统专门编写的一款编译器。GNU系统是彻底的自由软件。此处，“自由”的含义是它尊重用户的自由。这里不展开讲解，感兴趣的同学可以去查阅相关资料，这里给出<a href="http://gcc.gnu.org/" target="_blank" rel="noopener">官网</a></p><p><strong>make(version &gt;= 3.75)</strong></p><p>​    又叫GNU Make，此软件是GNU系列的编译软件，其<a href="http://www.gnu.org/software/make/" target="_blank" rel="noopener">官网</a>，其<a href="http://www.gnu.org/software/make/manual/make.html" target="_blank" rel="noopener">使用手册</a>，既然在linux下编译软件，此软件几乎是少不了的。</p><p><strong>autoconf:</strong></p><p>​    又一款GNU下的软件，Autoconf是一个用于包，以适应多种<a href="https://baike.baidu.com/item/Unix/219943" target="_blank" rel="noopener">Unix</a>类系统的 <a href="https://baike.baidu.com/item/shell%E8%84%9A%E6%9C%AC/572265" target="_blank" rel="noopener">shell脚本</a>的工具，其<a href="http://www.gnu.org/software/autoconf/autoconf.html" target="_blank" rel="noopener">官网</a>，<a href="http://www.gnu.org/software/autoconf/manual/autoconf.html" target="_blank" rel="noopener">使用手册</a>，此软件和make基本结对出现。    </p><p><strong>bison(version &gt;= 2.1)</strong></p><p>​    GNU bison 是属于 <a href="https://baike.baidu.com/item/GNU" target="_blank" rel="noopener">GNU</a> 项目的一个<a href="https://baike.baidu.com/item/%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90%E5%99%A8" target="_blank" rel="noopener">语法分析器</a>生成器。Bison 把一个关于“向前查看 从左到右 最右”(LALR) 上下文无关文法的描述转化成可以分析该文法的 C 或 <a href="https://baike.baidu.com/item/C%2B%2B" target="_blank" rel="noopener">C++</a> 程序。它也可以为二义文法生成 “通用的 从左到右 最右” (GLR)语法分析器。其<a href="http://www.gnu.org/software/bison/" target="_blank" rel="noopener">官网</a>，<a href="http://www.gnu.org/software/bison/manual/" target="_blank" rel="noopener">使用手册</a></p><blockquote><p>mysql源码编译安装依赖 <a href="https://dev.mysql.com/doc/refman/5.6/en/source-installation.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/5.6/en/source-installation.html</a></p></blockquote><h2 id="3-Nginx安装"><a href="#3-Nginx安装" class="headerlink" title="3 Nginx安装"></a>3 Nginx安装</h2><h3 id="3-1-编译安装"><a href="#3-1-编译安装" class="headerlink" title="3.1 编译安装"></a>3.1 编译安装</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#解压源码文件</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/lnmp/src</span><br><span class="line">tar -zxf nginx-1.13.4.tar.gz</span><br><span class="line"><span class="built_in">cd</span> nginx-1.13.4</span><br><span class="line"></span><br><span class="line"><span class="comment">#执行configure，指定安装目录为 /usr/local/lnmp/nginx-1.13.4</span></span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/lnmp/nginx-1.13.4</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line"><span class="comment">#进入nginx安装目录，检测是否安装成功</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/lnmp/nginx-1.13.4</span><br><span class="line"></span><br><span class="line"><span class="comment">#执行下列命令，若出现错误，跟进错误进行修正</span></span><br><span class="line">nginx -t</span><br></pre></td></tr></table></figure><h3 id="3-2-软件配置"><a href="#3-2-软件配置" class="headerlink" title="3.2 软件配置"></a>3.2 软件配置</h3><p>为了能够让我们的软件运行起来，我们最开始只做最简单的配置。</p><h4 id="3-2-1-nginx-conf"><a href="#3-2-1-nginx-conf" class="headerlink" title="3.2.1 nginx.conf"></a>3.2.1 nginx.conf</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#user  nobody;</span></span><br><span class="line"><span class="attribute">worker_processes</span>  <span class="number">1</span>;</span><br><span class="line"><span class="attribute">pid</span> logs/nginx.pid;</span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span>       mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line"><span class="comment">#日志格式</span></span><br><span class="line">    <span class="attribute">log_format</span>  main  <span class="string">'<span class="variable">$remote_addr</span> - <span class="variable">$remote_user</span> [<span class="variable">$time_local</span>] "<span class="variable">$request</span>" '</span></span><br><span class="line">                      <span class="string">'<span class="variable">$status</span> <span class="variable">$body_bytes_sent</span> "<span class="variable">$http_referer</span>" '</span></span><br><span class="line">                      <span class="string">'"<span class="variable">$http_user_agent</span>" "<span class="variable">$http_x_forwarded_for</span>"'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#gzip  on;</span></span><br><span class="line">    <span class="attribute">include</span> vhost/<span class="regexp">*.conf</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-2-vhost"><a href="#3-2-2-vhost" class="headerlink" title="3.2.2 vhost"></a>3.2.2 vhost</h4><p>因为软件可能运行不止一个网站，故我们在nginx的conf目录下创建vhost目录，用于存放虚拟主机。同时为了把业务项目与运行环境分开，这里我们将代码目录建在/data0/www/htdocs/lnmp.com目录下，我们的网站就叫lnmp.com吧。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">9091</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  localhost;</span><br><span class="line">    <span class="attribute">access_log</span>  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span>   /data0/www/htdocs/lnmp.com;</span><br><span class="line">        <span class="attribute">index</span>  index.php;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#error_page  404              /404.html;</span></span><br><span class="line">    <span class="comment"># redirect server error pages to the static page /50x.html</span></span><br><span class="line">    <span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">    <span class="comment"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span></span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~ \.php$</span> &#123;</span><br><span class="line">        <span class="attribute">root</span>           /data0/www/htdocs/lnmp.com;</span><br><span class="line">        <span class="attribute">fastcgi_pass</span>   <span class="number">127.0.0.1:9000</span>;</span><br><span class="line">        <span class="attribute">fastcgi_index</span>  index.php;</span><br><span class="line">        <span class="attribute">fastcgi_param</span>  SCRIPT_FILENAME  <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">        <span class="attribute">include</span>        fastcgi_params;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-测试"><a href="#3-3-测试" class="headerlink" title="3.3 测试"></a>3.3 测试</h3><p>检测安装是否成功，进入 /usr/local/lnmp/nginx-1.13.4/sbin目录，执行 <code>./nginx -t</code>命令，若输出如下信息，则表示安装成功。</p><blockquote><p>nginx: the configuration file /usr/local/lnmp/nginx-1.13.4/conf/nginx.conf syntax is ok<br>nginx: configuration file /usr/local/lnmp/nginx-1.13.4/conf/nginx.conf test is successful</p></blockquote><p>否则，跟进提示进行修正，如我修改完配置文件执行时，报错如下</p><blockquote><p>nginx: [emerg] unexpected “}” in /usr/local/lnmp/nginx-1.13.4/conf/nginx.conf:72<br>nginx: configuration file /usr/local/lnmp/nginx-1.13.4/conf/nginx.conf test failed</p></blockquote><p>提示很明显，因为nginx.conf文件72行遇到了不接受的”}”符号，打开文件发现其实在include vhost/*.conf后忘记添加分号，添加上分号，再次执行，提示成功。</p><h3 id="3-3-使用解读"><a href="#3-3-使用解读" class="headerlink" title="3.3 使用解读"></a>3.3 使用解读</h3><p>nginx安装完毕后，目录如下:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── client_body_temp</span><br><span class="line">├── conf //此目录为存放配置文件目录</span><br><span class="line">│   └── vhost</span><br><span class="line">├── fastcgi_temp</span><br><span class="line">├── html //存放网站代码的目录，一般情况下，我们会有自己的网站目录，这里可以存放一些统一的4xx、5xx页面。</span><br><span class="line">├── logs //默认存放nginx运行日志的地方</span><br><span class="line">├── proxy_temp</span><br><span class="line">├── sbin //此目录是存放执行命令的目录</span><br><span class="line">├── scgi_temp</span><br><span class="line">└── uwsgi_temp</span><br></pre></td></tr></table></figure><h4 id="3-3-1-sbin"><a href="#3-3-1-sbin" class="headerlink" title="3.3.1 sbin"></a>3.3.1 sbin</h4><p>这里我们先说sbin目录，其中只有一个文件nginx可执行文件，此文件用于管理nginx的启动、停止、重启。</p><p>nginx命令支持以下参数： </p><blockquote><p><strong>-v ：</strong>显示版本号并退出</p><p><strong>-V：</strong>显示版本号，同时显示编译时选项并退出</p><p><strong>-t：</strong>测试配置文件，并退出</p><p><strong>-T：</strong>测试配置文件，并将其输出，然后退出</p><p><strong>-s signal：</strong>发送信号给nginx master，用于平滑停止，退出，平滑重启，重启。signal包括（stop|quit|reload|reopen）</p><p><strong>-c：</strong>指定nginx的配置文件，默认为conf/nginx.conf</p><p><strong>-g：</strong>设置配置文件之外的全局指令，用的比较少</p></blockquote><p><strong>nginx启动</strong></p><p>使用默认的配置文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/lnmp/nginx-1.13.4/sbin/nginx</span><br></pre></td></tr></table></figure><p>使用指定的配置文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/lnmp/nginx-1.13.4/sbin/nginx -c /path/配置文件</span><br></pre></td></tr></table></figure><p><strong>nginx停止</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/lnmp/nginx-1.13.4/sbin/nginx -s stop</span><br></pre></td></tr></table></figure><p>对于nginx的关闭，还可以使用kill命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> -QUIT 主进程pid 或 <span class="built_in">kill</span> -QUIT `cat /path/pid` 从容关闭</span><br><span class="line"><span class="built_in">kill</span> -TERM 主进程pid 或 <span class="built_in">kill</span> -TERM `cat /path/pid` 快速关闭</span><br><span class="line"><span class="built_in">kill</span> -INT 主进程pid 或 <span class="built_in">kill</span> -INT `cat /path/pid`   快速关闭</span><br><span class="line">pKill -9 主进程pid 或 pkill -9 `cat /path/pid`     强制关闭</span><br></pre></td></tr></table></figure><p>但我们推荐使用./nginx -s stop命令</p><p><strong>nginx重启</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/lnmp/nginx-1.13.4/sbin/nginx -s reload</span><br></pre></td></tr></table></figure><p>对于重启，还可以使用kill命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> -USR2 `cat /path/pid`</span><br><span class="line"><span class="comment">#如本文中的示例：</span></span><br><span class="line"><span class="built_in">kill</span> -USR2 `cat /usr/<span class="built_in">local</span>/lnmp/nginx-1.13.4/logs/nginx.pid`</span><br></pre></td></tr></table></figure><h4 id="3-3-2-conf"><a href="#3-3-2-conf" class="headerlink" title="3.3.2 conf"></a>3.3.2 conf</h4><p>nginx配置文件主要为nginx.conf，这里我们就来详细解读下其中的相关配置指令及含义。</p><p>nginx的强大都是靠配置文件来实现，nginx就是一个二进制文件，nginx读入一个配置文件nginx.conf(nginx.conf可能include包含若干子配置文件)来实现各种各样的功能。我们分段来介绍nginx.conf文件。</p><h5 id="3-3-2-1-全局配置段"><a href="#3-3-2-1-全局配置段" class="headerlink" title="3.3.2.1 全局配置段"></a>3.3.2.1 全局配置段</h5><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">worker_processes</span>  <span class="number">1</span>;</span><br><span class="line"><span class="comment">#error_log  logs/error.log;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  notice;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  info;</span></span><br><span class="line"><span class="attribute">pid</span>        logs/nginx.pid; </span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这些是配置文件开始的默认行。通常的环境下，你不需要修改这些选项。这一部分有几个方面需要我们注意：</p><ul><li>所有以#号开的行是注释，nginx不会解析。默认的配置文件有许多说明解释的注释块</li><li>指令是以一个变量名开头(例如，worker_processes或pid),然后包含一个参数(例如，1或 logs/nginx.pid)或者多个参数(例如，”logs/error.log notice”)</li><li>所有指令以分号结尾</li><li>某些指令，像上面的<code>events</code>可以包含多个子指令作为参数。这些子指令以花括号包围。</li><li>虽然nginx不解析空白符(例如tab，空格，和换行符)，但是良好的缩进能提高你维护长期运行配置文件的效率。良好的缩进使配置文件读起来更流畅，能让你很容易明白配置的策略，即使几个月前。</li></ul><h5 id="3-3-2-2-http段"><a href="#3-3-2-2-http段" class="headerlink" title="3.3.2.2 http段"></a>3.3.2.2 http段</h5><p>官方定义如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax:http &#123; ... &#125;</span><br><span class="line">Default:—</span><br><span class="line">Context:main</span><br></pre></td></tr></table></figure><p>本实践示例如下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span>       mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#log 参考官方文档：http://nginx.org/en/docs/http/ngx_http_log_module.html#access_log</span></span><br><span class="line">    <span class="attribute">log_format</span>  main  <span class="string">'<span class="variable">$remote_addr</span> - <span class="variable">$remote_user</span> [<span class="variable">$time_local</span>] "<span class="variable">$request</span>" '</span></span><br><span class="line">                      <span class="string">'<span class="variable">$status</span> <span class="variable">$body_bytes_sent</span> "<span class="variable">$http_referer</span>" '</span></span><br><span class="line">                      <span class="string">'"<span class="variable">$http_user_agent</span>" "<span class="variable">$http_x_forwarded_for</span>"'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#access_log  logs/access.log  main;</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>;</span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#keepalive_timeout  0;</span></span><br><span class="line">    <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#gzip可以参考官方文档：http://nginx.org/en/docs/http/ngx_http_gzip_module.html</span></span><br><span class="line">    <span class="attribute">gzip</span>  <span class="literal">on</span>;</span><br><span class="line">  <span class="attribute">gzip_min_length</span> <span class="number">1000</span>;</span><br><span class="line"><span class="attribute">gzip_proxied</span>    expired <span class="literal">no</span>-cache <span class="literal">no</span>-store private auth;</span><br><span class="line"><span class="attribute">gzip_types</span>      text/plain application/xml;</span><br><span class="line"><span class="attribute">gzip_comp_level</span> <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">include</span> vhost/<span class="regexp">*.conf</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>“http { }”块的开头像配置文件的开头一样都是标准配置不需要修改。这里我们需要把注意力放在这些元素上:</p><ul><li>这部分内容的开始”include”语句包含/usr/local/lnmp/nginx-1.13.4/conf/mime.types文件到nginx.conf文件include语句所在位置。include对ningx.conf文件的可读性和组织性很有用。</li><li>不能过多使用include，如果太多递归地include文件会产生混乱，所以需要合理有限制地使用include来保证配置文件的清晰和可管理。</li><li>你可以去掉log_format指令前的注释并修改这几行设置的变量为你想记录的信息。</li><li>gzip指令告诉nginx使用gzip压缩的方式来降低带宽使用和加快传输速度。如果想使用gzip压缩，需要添加如下配置到配置文件的gzip位置。</li><li>include vhost/*.conf;表示包含的虚拟主机配置，这将在下一段讲解。</li></ul><h5 id="3-3-2-3-server段"><a href="#3-3-2-3-server段" class="headerlink" title="3.3.2.3 server段"></a>3.3.2.3 server段</h5><p>虚拟主机配置指令块为server，其包含与http指令块中，为了方面我们配置，我们将其独立出来，通过include指令将其包含进入http指令块中去。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax:server &#123; ... &#125;</span><br><span class="line">Default:—</span><br><span class="line">Context:http</span><br></pre></td></tr></table></figure><p>本实践配置示例：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">9091</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  localhost;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#charset koi8-r;</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">access_log</span>  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">      <span class="attribute">root</span>   /data0/www/htdocs/lnmp.com;</span><br><span class="line">      <span class="attribute">index</span>  index.php;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#error_page  404              /404.html;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># redirect server error pages to the static page /50x.html</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#location ~ \.php$ &#123;</span></span><br><span class="line">    <span class="comment">#    proxy_pass   http://127.0.0.1;</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~ \.php$</span> &#123;</span><br><span class="line">      <span class="attribute">root</span>           /data0/www/htdocs/lnmp.com;</span><br><span class="line">      <span class="attribute">fastcgi_pass</span>   <span class="number">127.0.0.1:9000</span>;</span><br><span class="line">      <span class="attribute">fastcgi_index</span>  index.php;</span><br><span class="line">      <span class="attribute">fastcgi_param</span>  SCRIPT_FILENAME  <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">      <span class="attribute">include</span>        fastcgi_params;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># deny access to .htaccess files, if Apache's document root</span></span><br><span class="line">    <span class="comment"># concurs with nginx's one</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#location ~ /\.ht &#123;</span></span><br><span class="line">    <span class="comment">#    deny  all;</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>listen：</strong>指令告诉nginx在一个特定的hostname，ip或者tcp端口监听连接。默认，http服务运行在80端口。以下这些listen指令都是有效的</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; listen     127.0.0.1:80;</span><br><span class="line">&gt; listen     localhost:80;</span><br><span class="line">&gt; listen     12.34.56.79:80;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><strong>server_name：</strong>指令可以设置基于域名的虚拟主机，根据请求头部的内容，一个ip的服务器可以配置多个域名。以下这些配置均是可以的</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; server_name lnmp.com www.lnmp.com;</span><br><span class="line">&gt; server_name *.lnmp.com;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>多个域名之间以空格分隔。nginx允许一个虚拟主机有一个或多个名字，也可以使用通配符”*”来设置虚拟主机的名字。</p></blockquote><blockquote><p><strong>access_log：</strong>用于配置虚拟主机日志，以下配置均可以。第一个使用相对路径，日志存储在/usr/local/lnmp/nginx-1.13.4/logs/lnmp.access.log中，第二个使用绝对路径，第三个表示不记录日志到文件。第一行参数有两个，第一个表示日志文件，第二个表示日志类型</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; access_log  logs/lnmp.access.log  main;</span><br><span class="line">&gt; access_log  /data0/www/logs/lnmp.access.log main;</span><br><span class="line">&gt; access_log  off;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p><strong>location指令</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">语法:location [ = | ~ | ~* | ^~ ] uri &#123; ... &#125;</span><br><span class="line">     location @name &#123; ... &#125;</span><br><span class="line">默认: —</span><br><span class="line">运行上下文: server, location</span><br></pre></td></tr></table></figure><p><strong>语法解释：</strong></p><p><strong>~</strong>      #波浪线表示执行一个正则匹配，区分大小写</p><p><strong>~*</strong>    #表示执行一个正则匹配，不区分大小写</p><p><strong>^~</strong>    #^~表示普通字符匹配，如果该选项匹配，只匹配该选项，不匹配别的选项，一般用来匹配目录</p><p><strong>=</strong>      #进行普通字符精确匹配</p><p><strong>@</strong>     #”@” 定义一个命名的 location，使用在内部定向时，例如 error_page, try_files</p><p><strong>location分类：</strong></p><ol><li>普通location（无任何前缀的和”=”，”^~ “，”@”表示普通location）<ol><li>严格精确匹配</li><li>最长前缀匹配</li></ol></li><li>正则location（“~ ”和“~* ”前缀表示正则location）</li></ol><p>注：“^~ ”符号（^ 表示“非”，~ 表示“正则”，字符意思是：不要继续匹配正则）</p><p><strong>location匹配顺序：</strong></p><p>正则 location 匹配让步普通 location 的严格精确匹配结果；但覆盖普通 location 的最大前缀匹配结果。详细解释下就是：优先普通location匹配中的严格精确匹配，若没有命中严格精确匹配，则进行最长前缀匹配，若命中一个最长前缀匹配，则先暂时定为优先选择，接着进行正则匹配，若正则匹配命中，则使用正则匹配到的结果覆盖之前的最长前缀匹配结果。这里并不是所有的普通location都会进行后续的正则搜索匹配，若最长前缀匹配结果是”^~” 和 “=”，则会组织后续的正则匹配，直接使用此结果。</p><p><strong>location物理位置：</strong></p><p>对于location之间的配置顺序，普通location 与其无关，正则location 与其有关的。</p><p><strong>location示例：</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> = / &#123;</span><br><span class="line">    [ configuration A ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">    [ configuration B ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> /documents/ &#123;</span><br><span class="line">    [ configuration C ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span><span class="regexp"> ^~</span> /images/ &#123;</span><br><span class="line">    [ configuration D ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> <span class="regexp">~* \.(gif|jpg|jpeg)$</span> &#123;</span><br><span class="line">    [ configuration E ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>“/“ 请求将会匹配配置A，因为其为普通location里的严格精确匹配，结束匹配。</li><li>“/index.html” 将会匹配配置B，此为前缀字符串匹配（普通匹配之后的正则搜索没有匹配到）</li><li>“/documents/index.html” 将会匹配配置C，先进行普通匹配，命中C，后续进行正则匹配，没有命中，故使用最长前缀匹配到的结果，所以最终匹配C。</li><li>“/images/1.gif” 将会匹配配置D，普通location最长浅醉匹配成功后，不在匹配正则匹配</li><li>“/documents/1.jpg” 将会匹配配置E，最长前缀匹配到C，继续搜索正则，后正则匹配到E，则最终匹配到E</li></ol><p>更多nginx配置指令请移步官方文档：<a href="http://nginx.org/en/docs/" target="_blank" rel="noopener">http://nginx.org/en/docs/</a></p><h2 id="4-mysql安装"><a href="#4-mysql安装" class="headerlink" title="4 mysql安装"></a>4 mysql安装</h2><h3 id="4-1-编译安装"><a href="#4-1-编译安装" class="headerlink" title="4.1 编译安装"></a>4.1 编译安装</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#添加mysql用户组</span></span><br><span class="line">groupadd mysql</span><br><span class="line"><span class="comment">#添加mysql用户，且设置其组为mysql，同时设置其shell为空</span></span><br><span class="line">useradd -r -g mysql -s /bin/<span class="literal">false</span> mysql</span><br><span class="line"><span class="comment">#进入源码目录</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/lnmp/src</span><br><span class="line"><span class="comment">#解压mysql压缩包</span></span><br><span class="line">tar -zxf mysql-5.6.37.tar.gz</span><br><span class="line"><span class="built_in">cd</span> mysql-5.6.37</span><br><span class="line">mkdir bld</span><br><span class="line"><span class="built_in">cd</span> bld</span><br><span class="line"><span class="comment">#编译的参数可以参考:http://dev.mysql.com/doc/refman/5.5/en/source-configuration-option s.html</span></span><br><span class="line">cmake -DCMAKE_INSTALL_PREFIX=/usr/<span class="built_in">local</span>/lnmp/mysql-5.6.37 ..</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line">chown -R mysql .</span><br><span class="line">chgrp -R mysql .</span><br><span class="line"><span class="comment">#初始化数据库，此操作会在安装目录下同时生成my.cnf文件</span></span><br><span class="line">scripts/mysql_install_db --user=mysql</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动mysql</span></span><br><span class="line">/usr/<span class="built_in">local</span>/lnmp/mysql-5.6.37/bin/mysqld --user=mysql --explicit_defaults_for_timestamp</span><br><span class="line"><span class="comment">#停掉mysql</span></span><br><span class="line">/usr/<span class="built_in">local</span>/lnmp/mysql-5.6.37/bin/mysqladmin shutdown</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#在测试库创建测试用户表</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span> (<span class="string">`id`</span> <span class="built_in">bigint</span> <span class="keyword">unsigned</span> auto_increment <span class="keyword">comment</span> <span class="string">'主键'</span>,<span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">''</span> <span class="keyword">comment</span> <span class="string">'姓名'</span>,<span class="string">`age`</span> tinyint <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="number">0</span> <span class="keyword">comment</span> <span class="string">'年龄'</span>, primary <span class="keyword">key</span> <span class="keyword">id</span>(<span class="string">`id`</span>) ) <span class="keyword">ENGINE</span> = <span class="keyword">innodb</span> AUTO_INCREMENT = <span class="number">1</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> = utf8;</span><br><span class="line"></span><br><span class="line">#插入数据</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span>(<span class="string">`id`</span>,<span class="string">`name`</span>,<span class="string">`age`</span>) <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">'安琪拉'</span>,<span class="number">34</span>),(<span class="number">1</span>,<span class="string">'王昭君'</span>,<span class="number">34</span>);</span><br></pre></td></tr></table></figure><h3 id="4-2-配置"><a href="#4-2-配置" class="headerlink" title="4.2 配置"></a>4.2 配置</h3><p><a href="http://dev.mysql.com/doc/refman/5.6/en/server-configuration-defaults.html" target="_blank" rel="noopener">官方文档</a>，mysql启动时，需要加载my.cnf配置文件，加载查找路径为：/etc/my.cnf &gt; $basedir/my.cnf 本实践中查找路径为/usr/local/lnmp/mysql-5.6.37/my.cnf</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[client]</span></span><br><span class="line"><span class="attr">port</span> = <span class="number">3306</span></span><br><span class="line"><span class="attr">socket</span> = /tmp/mysql.sock</span><br><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="attr">port</span> = <span class="number">3306</span></span><br><span class="line"><span class="attr">socket</span> = /tmp/mysql.sock</span><br><span class="line"><span class="attr">basedir</span> = /usr/local/lnmp/mysql-<span class="number">5.6</span>.<span class="number">37</span></span><br><span class="line"><span class="attr">datadir</span> = /usr/local/lnmp/mysql-<span class="number">5.6</span>.<span class="number">37</span>/data</span><br><span class="line"><span class="attr">pid-file</span> = /usr/local/lnmp/mysql-<span class="number">5.6</span>.<span class="number">37</span>/data/mysql.pid</span><br><span class="line"><span class="attr">user</span> = mysql</span><br><span class="line"><span class="attr">bind-address</span> = <span class="number">0.0</span>.<span class="number">0.0</span></span><br><span class="line"><span class="comment">#表示是本机的序号为1,一般来讲就是master的意思</span></span><br><span class="line"><span class="attr">server-id</span> = <span class="number">1</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">#skip-name-resolve</span></span><br><span class="line"><span class="comment"># 禁止MySQL对外部连接进行DNS解析，使用这一选项可以消除MySQL进行DNS解析的时间。但需要注意，如果开启该选项，</span></span><br><span class="line"><span class="comment"># 则所有远程主机连接授权都要使用IP地址方式，否则MySQL将无法正常处理连接请求</span></span><br><span class="line"><span class="comment">#skip-networking</span></span><br><span class="line"><span class="attr">back_log</span> = <span class="number">600</span></span><br><span class="line"><span class="comment"># MySQL能有的连接数量。当主要MySQL线程在一个很短时间内得到非常多的连接请求，这就起作用，</span></span><br><span class="line"><span class="comment"># 然后主线程花些时间(尽管很短)检查连接并且启动一个新线程。back_log值指出在MySQL暂时停止回答新请求之前的短时间内多少个请求可以被存在堆栈中。</span></span><br><span class="line"><span class="comment"># 如果期望在一个短时间内有很多连接，你需要增加它。也就是说，如果MySQL的连接数据达到max_connections时，新来的请求将会被存在堆栈中，</span></span><br><span class="line"><span class="comment"># 以等待某一连接释放资源，该堆栈的数量即back_log，如果等待连接的数量超过back_log，将不被授予连接资源。</span></span><br><span class="line"><span class="comment"># 另外，这值（back_log）限于您的操作系统对到来的TCP/IP连接的侦听队列的大小。</span></span><br><span class="line"><span class="comment"># 你的操作系统在这个队列大小上有它自己的限制（可以检查你的OS文档找出这个变量的最大值），试图设定back_log高于你的操作系统的限制将是无效的。</span></span><br><span class="line"><span class="attr">max_connections</span> = <span class="number">1000</span></span><br><span class="line"><span class="comment"># MySQL的最大连接数，如果服务器的并发连接请求量比较大，建议调高此值，以增加并行连接数量，当然这建立在机器能支撑的情况下，因为如果连接数越多，介于MySQL会为每个连接提供连接缓冲区，就会开销越多的内存，所以要适当调整该值，不能盲目提高设值。可以过'conn%'通配符查看当前状态的连接数量，以定夺该值的大小。</span></span><br><span class="line"><span class="attr">max_connect_errors</span> = <span class="number">6000</span></span><br><span class="line"><span class="comment"># 对于同一主机，如果有超出该参数值个数的中断错误连接，则该主机将被禁止连接。如需对该主机进行解禁，执行：FLUSH HOST。</span></span><br><span class="line"><span class="attr">open_files_limit</span> = <span class="number">65535</span></span><br><span class="line"><span class="comment"># MySQL打开的文件描述符限制，默认最小1024;当open_files_limit没有被配置的时候，比较max_connections*5和ulimit -n的值，哪个大用哪个，</span></span><br><span class="line"><span class="comment"># 当open_file_limit被配置的时候，比较open_files_limit和max_connections*5的值，哪个大用哪个。</span></span><br><span class="line"><span class="attr">table_open_cache</span> = <span class="number">128</span></span><br><span class="line"><span class="comment"># MySQL每打开一个表，都会读入一些数据到table_open_cache缓存中，当MySQL在这个缓存中找不到相应信息时，才会去磁盘上读取。默认值64</span></span><br><span class="line"><span class="comment"># 假定系统有200个并发连接，则需将此参数设置为200*N(N为每个连接所需的文件描述符数目)；</span></span><br><span class="line"><span class="comment"># 当把table_open_cache设置为很大时，如果系统处理不了那么多文件描述符，那么就会出现客户端失效，连接不上</span></span><br><span class="line"><span class="attr">max_allowed_packet</span> = <span class="number">4</span>M</span><br><span class="line"><span class="comment"># 接受的数据包大小；增加该变量的值十分安全，这是因为仅当需要时才会分配额外内存。例如，仅当你发出长查询或MySQLd必须返回大的结果行时MySQLd才会分配更多内存。</span></span><br><span class="line"><span class="comment"># 该变量之所以取较小默认值是一种预防措施，以捕获客户端和服务器之间的错误信息包，并确保不会因偶然使用大的信息包而导致内存溢出。</span></span><br><span class="line"><span class="attr">binlog_cache_size</span> = <span class="number">1</span>M</span><br><span class="line"><span class="comment"># 一个事务，在没有提交的时候，产生的日志，记录到Cache中；等到事务提交需要提交的时候，则把日志持久化到磁盘。默认binlog_cache_size大小32K</span></span><br><span class="line"><span class="attr">max_heap_table_size</span> = <span class="number">8</span>M</span><br><span class="line"><span class="comment"># 定义了用户可以创建的内存表(memory table)的大小。这个值用来计算内存表的最大行数值。这个变量支持动态改变</span></span><br><span class="line"><span class="attr">tmp_table_size</span> = <span class="number">16</span>M</span><br><span class="line"><span class="comment"># MySQL的heap（堆积）表缓冲大小。所有联合在一个DML指令内完成，并且大多数联合甚至可以不用临时表即可以完成。</span></span><br><span class="line"><span class="comment"># 大多数临时表是基于内存的(HEAP)表。具有大的记录长度的临时表 (所有列的长度的和)或包含BLOB列的表存储在硬盘上。</span></span><br><span class="line"><span class="comment"># 如果某个内部heap（堆积）表大小超过tmp_table_size，MySQL可以根据需要自动将内存中的heap表改为基于硬盘的MyISAM表。还可以通过设置tmp_table_size选项来增加临时表的大小。也就是说，如果调高该值，MySQL同时将增加heap表的大小，可达到提高联接查询速度的效果</span></span><br><span class="line"><span class="attr">read_buffer_size</span> = <span class="number">2</span>M</span><br><span class="line"><span class="comment"># MySQL读入缓冲区大小。对表进行顺序扫描的请求将分配一个读入缓冲区，MySQL会为它分配一段内存缓冲区。read_buffer_size变量控制这一缓冲区的大小。</span></span><br><span class="line"><span class="comment"># 如果对表的顺序扫描请求非常频繁，并且你认为频繁扫描进行得太慢，可以通过增加该变量值以及内存缓冲区大小提高其性能</span></span><br><span class="line"><span class="attr">read_rnd_buffer_size</span> = <span class="number">8</span>M</span><br><span class="line"><span class="comment"># MySQL的随机读缓冲区大小。当按任意顺序读取行时(例如，按照排序顺序)，将分配一个随机读缓存区。进行排序查询时，</span></span><br><span class="line"><span class="comment"># MySQL会首先扫描一遍该缓冲，以避免磁盘搜索，提高查询速度，如果需要排序大量数据，可适当调高该值。但MySQL会为每个客户连接发放该缓冲空间，所以应尽量适当设置该值，以避免内存开销过大</span></span><br><span class="line"><span class="attr">sort_buffer_size</span> = <span class="number">8</span>M</span><br><span class="line"><span class="comment"># MySQL执行排序使用的缓冲大小。如果想要增加ORDER BY的速度，首先看是否可以让MySQL使用索引而不是额外的排序阶段。</span></span><br><span class="line"><span class="comment"># 如果不能，可以尝试增加sort_buffer_size变量的大小</span></span><br><span class="line"><span class="attr">join_buffer_size</span> = <span class="number">8</span>M</span><br><span class="line"><span class="comment"># 联合查询操作所能使用的缓冲区大小，和sort_buffer_size一样，该参数对应的分配内存也是每连接独享</span></span><br><span class="line"><span class="attr">thread_cache_size</span> = <span class="number">8</span></span><br><span class="line"><span class="comment"># 这个值（默认8）表示可以重新利用保存在缓存中线程的数量，当断开连接时如果缓存中还有空间，那么客户端的线程将被放到缓存中，</span></span><br><span class="line"><span class="comment"># 如果线程重新被请求，那么请求将从缓存中读取,如果缓存中是空的或者是新的请求，那么这个线程将被重新创建,如果有很多新的线程，</span></span><br><span class="line"><span class="comment"># 增加这个值可以改善系统性能.通过比较Connections和Threads_created状态的变量，可以看到这个变量的作用。(–&gt;表示要调整的值)</span></span><br><span class="line"><span class="comment"># 根据物理内存设置规则如下：</span></span><br><span class="line"><span class="comment"># 1G  —&gt; 8</span></span><br><span class="line"><span class="comment"># 2G  —&gt; 16</span></span><br><span class="line"><span class="comment"># 3G  —&gt; 32</span></span><br><span class="line"><span class="comment"># 大于3G  —&gt; 64</span></span><br><span class="line"><span class="attr">query_cache_size</span> = <span class="number">8</span>M</span><br><span class="line"><span class="comment">#MySQL的查询缓冲大小（从4.0.1开始，MySQL提供了查询缓冲机制）使用查询缓冲，MySQL将SELECT语句和查询结果存放在缓冲区中，</span></span><br><span class="line"><span class="comment"># 今后对于同样的SELECT语句（区分大小写），将直接从缓冲区中读取结果。根据MySQL用户手册，使用查询缓冲最多可以达到238%的效率。</span></span><br><span class="line"><span class="comment"># 通过检查状态值'Qcache_%'，可以知道query_cache_size设置是否合理：如果Qcache_lowmem_prunes的值非常大，则表明经常出现缓冲不够的情况，</span></span><br><span class="line"><span class="comment"># 如果Qcache_hits的值也非常大，则表明查询缓冲使用非常频繁，此时需要增加缓冲大小；如果Qcache_hits的值不大，则表明你的查询重复率很低，</span></span><br><span class="line"><span class="comment"># 这种情况下使用查询缓冲反而会影响效率，那么可以考虑不用查询缓冲。此外，在SELECT语句中加入SQL_NO_CACHE可以明确表示不使用查询缓冲</span></span><br><span class="line"><span class="attr">query_cache_limit</span> = <span class="number">2</span>M</span><br><span class="line"><span class="comment">#指定单个查询能够使用的缓冲区大小，默认1M</span></span><br><span class="line"><span class="attr">key_buffer_size</span> = <span class="number">4</span>M</span><br><span class="line"><span class="comment">#指定用于索引的缓冲区大小，增加它可得到更好处理的索引(对所有读和多重写)，到你能负担得起那样多。如果你使它太大，</span></span><br><span class="line"><span class="comment"># 系统将开始换页并且真的变慢了。对于内存在4GB左右的服务器该参数可设置为384M或512M。通过检查状态值Key_read_requests和Key_reads，</span></span><br><span class="line"><span class="comment"># 可以知道key_buffer_size设置是否合理。比例key_reads/key_read_requests应该尽可能的低，</span></span><br><span class="line"><span class="comment"># 至少是1:100，1:1000更好(上述状态值可以使用SHOW STATUS LIKE 'key_read%'获得)。注意：该参数值设置的过大反而会是服务器整体效率降低</span></span><br><span class="line"><span class="attr">ft_min_word_len</span> = <span class="number">4</span></span><br><span class="line"><span class="comment"># 分词词汇最小长度，默认4</span></span><br><span class="line"><span class="attr">transaction_isolation</span> = REPEATABLE-READ</span><br><span class="line"><span class="comment"># MySQL支持4种事务隔离级别，他们分别是：</span></span><br><span class="line"><span class="comment"># READ-UNCOMMITTED, READ-COMMITTED, REPEATABLE-READ, SERIALIZABLE.</span></span><br><span class="line"><span class="comment"># 如没有指定，MySQL默认采用的是REPEATABLE-READ，ORACLE默认的是READ-COMMITTED</span></span><br><span class="line"><span class="attr">log_bin</span> = mysql-bin</span><br><span class="line"><span class="attr">binlog_format</span> = mixed</span><br><span class="line"><span class="comment">#超过30天的binlog删除</span></span><br><span class="line"><span class="attr">expire_logs_days</span> = <span class="number">30</span> </span><br><span class="line"><span class="comment">#错误日志路径</span></span><br><span class="line"><span class="attr">log_error</span> = /usr/local/lnmp/mysql-<span class="number">5.6</span>.<span class="number">37</span>/data/mysql.err</span><br><span class="line"><span class="attr">slow_query_log</span> = <span class="number">1</span></span><br><span class="line"><span class="comment">#慢查询时间 超过1秒则为慢查询</span></span><br><span class="line"><span class="attr">long_query_time</span> = <span class="number">1</span> </span><br><span class="line"><span class="attr">slow_query_log_file</span> = /usr/local/lnmp/mysql-<span class="number">5.6</span>.<span class="number">37</span>/data/mysql-slow.log</span><br><span class="line"><span class="attr">performance_schema</span> = <span class="number">0</span></span><br><span class="line">explicit_defaults_for_timestamp</span><br><span class="line"><span class="comment">#不区分大小写</span></span><br><span class="line"><span class="comment">#lower_case_table_names = 1 </span></span><br><span class="line"><span class="comment">#MySQL选项以避免外部锁定。该选项默认开启</span></span><br><span class="line">skip-external-locking </span><br><span class="line"><span class="comment">#默认存储引擎</span></span><br><span class="line"><span class="attr">default-storage-engine</span> = InnoDB </span><br><span class="line"><span class="attr">innodb_file_per_table</span> = <span class="number">1</span></span><br><span class="line"><span class="comment"># InnoDB为独立表空间模式，每个数据库的每个表都会生成一个数据空间</span></span><br><span class="line"><span class="comment"># 独立表空间优点：</span></span><br><span class="line"><span class="comment"># 1．每个表都有自已独立的表空间。</span></span><br><span class="line"><span class="comment"># 2．每个表的数据和索引都会存在自已的表空间中。</span></span><br><span class="line"><span class="comment"># 3．可以实现单表在不同的数据库中移动。</span></span><br><span class="line"><span class="comment"># 4．空间可以回收（除drop table操作处，表空不能自已回收）</span></span><br><span class="line"><span class="comment"># 缺点：</span></span><br><span class="line"><span class="comment"># 单表增加过大，如超过100G</span></span><br><span class="line"><span class="comment"># 结论：</span></span><br><span class="line"><span class="comment"># 共享表空间在Insert操作上少有优势。其它都没独立表空间表现好。当启用独立表空间时，请合理调整：innodb_open_files</span></span><br><span class="line"><span class="attr">innodb_open_files</span> = <span class="number">500</span></span><br><span class="line"><span class="comment"># 限制Innodb能打开的表的数据，如果库里的表特别多的情况，请增加这个。这个值默认是300</span></span><br><span class="line"><span class="attr">innodb_buffer_pool_size</span> = <span class="number">64</span>M</span><br><span class="line"><span class="comment"># InnoDB使用一个缓冲池来保存索引和原始数据, 不像MyISAM.</span></span><br><span class="line"><span class="comment"># 这里你设置越大,你在存取表里面数据时所需要的磁盘I/O越少.</span></span><br><span class="line"><span class="comment"># 在一个独立使用的数据库服务器上,你可以设置这个变量到服务器物理内存大小的80%</span></span><br><span class="line"><span class="comment"># 不要设置过大,否则,由于物理内存的竞争可能导致操作系统的换页颠簸.</span></span><br><span class="line"><span class="comment"># 注意在32位系统上你每个进程可能被限制在 2-3.5G 用户层面内存限制,</span></span><br><span class="line"><span class="comment"># 所以不要设置的太高.</span></span><br><span class="line"><span class="attr">innodb_write_io_threads</span> = <span class="number">4</span></span><br><span class="line"><span class="attr">innodb_read_io_threads</span> = <span class="number">4</span></span><br><span class="line"><span class="comment"># innodb使用后台线程处理数据页上的读写 I/O(输入输出)请求,根据你的 CPU 核数来更改,默认是4</span></span><br><span class="line"><span class="comment"># 注:这两个参数不支持动态改变,需要把该参数加入到my.cnf里，修改完后重启MySQL服务,允许值的范围从 1-64</span></span><br><span class="line"><span class="attr">innodb_thread_concurrency</span> = <span class="number">0</span></span><br><span class="line"><span class="comment"># 默认设置为 0,表示不限制并发数，这里推荐设置为0，更好去发挥CPU多核处理能力，提高并发量</span></span><br><span class="line"><span class="attr">innodb_purge_threads</span> = <span class="number">1</span></span><br><span class="line"><span class="comment"># InnoDB中的清除操作是一类定期回收无用数据的操作。在之前的几个版本中，清除操作是主线程的一部分，这意味着运行时它可能会堵塞其它的数据库操作。</span></span><br><span class="line"><span class="comment"># 从MySQL5.5.X版本开始，该操作运行于独立的线程中,并支持更多的并发数。用户可通过设置innodb_purge_threads配置参数来选择清除操作是否使用单</span></span><br><span class="line"><span class="comment"># 独线程,默认情况下参数设置为0(不使用单独线程),设置为 1 时表示使用单独的清除线程。建议为1</span></span><br><span class="line"><span class="attr">innodb_flush_log_at_trx_commit</span> = <span class="number">2</span></span><br><span class="line"><span class="comment"># 0：如果innodb_flush_log_at_trx_commit的值为0,log buffer每秒就会被刷写日志文件到磁盘，提交事务的时候不做任何操作（执行是由mysql的master thread线程来执行的。</span></span><br><span class="line"><span class="comment"># 主线程中每秒会将重做日志缓冲写入磁盘的重做日志文件(REDO LOG)中。不论事务是否已经提交）默认的日志文件是ib_logfile0,ib_logfile1</span></span><br><span class="line"><span class="comment"># 1：当设为默认值1的时候，每次提交事务的时候，都会将log buffer刷写到日志。</span></span><br><span class="line"><span class="comment"># 2：如果设为2,每次提交事务都会写日志，但并不会执行刷的操作。每秒定时会刷到日志文件。要注意的是，并不能保证100%每秒一定都会刷到磁盘，这要取决于进程的调度。</span></span><br><span class="line"><span class="comment"># 每次事务提交的时候将数据写入事务日志，而这里的写入仅是调用了文件系统的写入操作，而文件系统是有 缓存的，所以这个写入并不能保证数据已经写入到物理磁盘</span></span><br><span class="line"><span class="comment"># 默认值1是为了保证完整的ACID。当然，你可以将这个配置项设为1以外的值来换取更高的性能，但是在系统崩溃的时候，你将会丢失1秒的数据。</span></span><br><span class="line"><span class="comment"># 设为0的话，mysqld进程崩溃的时候，就会丢失最后1秒的事务。设为2,只有在操作系统崩溃或者断电的时候才会丢失最后1秒的数据。InnoDB在做恢复的时候会忽略这个值。</span></span><br><span class="line"><span class="comment"># 总结</span></span><br><span class="line"><span class="comment"># 设为1当然是最安全的，但性能页是最差的（相对其他两个参数而言，但不是不能接受）。如果对数据一致性和完整性要求不高，完全可以设为2，如果只最求性能，例如高并发写的日志服务器，设为0来获得更高性能</span></span><br><span class="line"><span class="attr">innodb_log_buffer_size</span> = <span class="number">2</span>M</span><br><span class="line"><span class="comment"># 此参数确定些日志文件所用的内存大小，以M为单位。缓冲区更大能提高性能，但意外的故障将会丢失数据。MySQL开发人员建议设置为1－8M之间</span></span><br><span class="line"><span class="attr">innodb_log_file_size</span> = <span class="number">32</span>M</span><br><span class="line"><span class="comment"># 此参数确定数据日志文件的大小，更大的设置可以提高性能，但也会增加恢复故障数据库所需的时间</span></span><br><span class="line"><span class="attr">innodb_log_files_in_group</span> = <span class="number">3</span></span><br><span class="line"><span class="comment"># 为提高性能，MySQL可以以循环方式将日志文件写到多个文件。推荐设置为3</span></span><br><span class="line"><span class="attr">innodb_max_dirty_pages_pct</span> = <span class="number">90</span></span><br><span class="line"><span class="comment"># innodb主线程刷新缓存池中的数据，使脏数据比例小于90%</span></span><br><span class="line"><span class="attr">innodb_lock_wait_timeout</span> = <span class="number">120</span> </span><br><span class="line"><span class="comment"># InnoDB事务在被回滚之前可以等待一个锁定的超时秒数。InnoDB在它自己的锁定表中自动检测事务死锁并且回滚事务。InnoDB用LOCK TABLES语句注意到锁定设置。默认值是50秒</span></span><br><span class="line"><span class="attr">bulk_insert_buffer_size</span> = <span class="number">8</span>M</span><br><span class="line"><span class="comment"># 批量插入缓存大小， 这个参数是针对MyISAM存储引擎来说的。适用于在一次性插入100-1000+条记录时， 提高效率。默认值是8M。可以针对数据量的大小，翻倍增加。</span></span><br><span class="line"><span class="attr">myisam_sort_buffer_size</span> = <span class="number">8</span>M</span><br><span class="line"><span class="comment"># MyISAM设置恢复表之时使用的缓冲区的尺寸，当在REPAIR TABLE或用CREATE INDEX创建索引或ALTER TABLE过程中排序 MyISAM索引分配的缓冲区</span></span><br><span class="line"><span class="attr">myisam_max_sort_file_size</span> = <span class="number">10</span>G</span><br><span class="line"><span class="comment"># 如果临时文件会变得超过索引，不要使用快速排序索引方法来创建一个索引。注释：这个参数以字节的形式给出</span></span><br><span class="line"><span class="attr">myisam_repair_threads</span> = <span class="number">1</span></span><br><span class="line"><span class="comment"># 如果该值大于1，在Repair by sorting过程中并行创建MyISAM表索引(每个索引在自己的线程内) </span></span><br><span class="line"><span class="attr">interactive_timeout</span> = <span class="number">28800</span></span><br><span class="line"><span class="comment"># 服务器关闭交互式连接前等待活动的秒数。交互式客户端定义为在mysql_real_connect()中使用CLIENT_INTERACTIVE选项的客户端。默认值：28800秒（8小时）</span></span><br><span class="line"><span class="attr">wait_timeout</span> = <span class="number">28800</span></span><br><span class="line"><span class="comment"># 服务器关闭非交互连接之前等待活动的秒数。在线程启动时，根据全局wait_timeout值或全局interactive_timeout值初始化会话wait_timeout值，</span></span><br><span class="line"><span class="comment"># 取决于客户端类型(由mysql_real_connect()的连接选项CLIENT_INTERACTIVE定义)。参数默认值：28800秒（8小时）</span></span><br><span class="line"><span class="comment"># MySQL服务器所支持的最大连接数是有上限的，因为每个连接的建立都会消耗内存，因此我们希望客户端在连接到MySQL Server处理完相应的操作后，</span></span><br><span class="line"><span class="comment"># 应该断开连接并释放占用的内存。如果你的MySQL Server有大量的闲置连接，他们不仅会白白消耗内存，而且如果连接一直在累加而不断开，</span></span><br><span class="line"><span class="comment"># 最终肯定会达到MySQL Server的连接上限数，这会报'too many connections'的错误。对于wait_timeout的值设定，应该根据系统的运行情况来判断。</span></span><br><span class="line"><span class="comment"># 在系统运行一段时间后，可以通过show processlist命令查看当前系统的连接状态，如果发现有大量的sleep状态的连接进程，则说明该参数设置的过大，</span></span><br><span class="line"><span class="comment"># 可以进行适当的调整小些。要同时设置interactive_timeout和wait_timeout才会生效。</span></span><br><span class="line"><span class="section">[mysqldump]</span></span><br><span class="line">quick</span><br><span class="line"><span class="comment">#服务器发送和接受的最大包长度</span></span><br><span class="line"><span class="attr">max_allowed_packet</span> = <span class="number">16</span>M </span><br><span class="line"><span class="section">[myisamchk]</span></span><br><span class="line"><span class="attr">key_buffer_size</span> = <span class="number">8</span>M</span><br><span class="line"><span class="attr">sort_buffer_size</span> = <span class="number">8</span>M</span><br><span class="line"><span class="attr">read_buffer</span> = <span class="number">4</span>M</span><br><span class="line"><span class="attr">write_buffer</span> = <span class="number">4</span>M</span><br></pre></td></tr></table></figure><p>这些配置在默认生成的文件中都没有，mysql支持启动时设置参数。</p><h3 id="4-3-启动"><a href="#4-3-启动" class="headerlink" title="4.3 启动"></a>4.3 启动</h3><p>对于mysql的启动，方式比较多</p><p><strong>mysqld_safe启动</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/lnmp/mysql-5.6.37/bin/mysqld_safe --user=mysql</span><br></pre></td></tr></table></figure><p><strong>mysqld启动</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/lnmp/mysql-5.6.37/bin/mysqld --user=mysql --explicit_defaults_for_timestamp</span><br></pre></td></tr></table></figure><p><strong>init.d启动</strong>：需要将support-files/mysql.server拷贝到/etc/init.d/mysql.server</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp support-files/mysql.server /etc/init.d/mysql.server</span><br><span class="line">/etc/init.d/mysql.server [start|stop|restart|reload|force-reload|status]</span><br></pre></td></tr></table></figure><h2 id="5-PHP安装"><a href="#5-PHP安装" class="headerlink" title="5 PHP安装"></a>5 PHP安装</h2><h3 id="5-1-编译安装"><a href="#5-1-编译安装" class="headerlink" title="5.1 编译安装"></a>5.1 编译安装</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#解压源文件</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/lnmp/src</span><br><span class="line">tar -zxf php-5.5.38.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> php-5.5.38</span><br><span class="line"><span class="comment">#配置编译选项（这里默认编译pdo，fpm，mysql模块，更多编译选项可以通过configure --help 查看）</span></span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/lnmp/php-5.5.38 --<span class="built_in">enable</span>-fpm --<span class="built_in">enable</span>-mysqlnd --with-mysql --with-mysqli --with-pdo-mysql</span><br><span class="line"></span><br><span class="line">make </span><br><span class="line"><span class="comment">#make完成后，会提示进行make test，这一步可以不做，但是建议做一下</span></span><br><span class="line">make <span class="built_in">test</span> </span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h3 id="5-2-配置PHP"><a href="#5-2-配置PHP" class="headerlink" title="5.2 配置PHP"></a>5.2 配置PHP</h3><p>​    PHP配置包括两部分，一部分是fpm的配置，因为我们nginx和php进行交互是采用fpm的形式进行的；另一部分为php.ini，php全局配置。php.ini去源码目录拷贝一份便可。</p><p><strong>php.ini</strong></p><p>存放目录：/usr/local/lnmp/php-5.5.38/lib，基本上安装完毕，拷贝到此目录基本不需要修改即可运行，这里我们简单罗列一些基本的配置。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[PHP]</span></span><br><span class="line"><span class="comment">; 输出缓存允许你甚 在输出正 内容之后发送 header(标头，包括cookies)    ; 或者在这 将指示设为 On  使得所有 件的输出缓存打开。</span></span><br><span class="line"><span class="attr">output_buffering</span> = <span class="literal">Off</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment">; 强制flush(刷新)让PHP 告诉输出层在每个输出块之后 动刷新 身数据，建议仅在debug过程中打开。</span></span><br><span class="line"><span class="attr">implicit_flush</span> = <span class="literal">Off</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment">; 每个脚本的最 执 时间, 按秒计</span></span><br><span class="line"><span class="attr">max_execution_time</span> = <span class="number">30</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">; 个脚本最多可使的内存总大小(这里是8MB)</span></span><br><span class="line"><span class="attr">memory_limit</span> = <span class="number">1024</span> </span><br><span class="line"></span><br><span class="line"><span class="section">[Date]</span></span><br><span class="line">date.timezone =Asia/Shanghai</span><br><span class="line"></span><br><span class="line"><span class="comment">; E_ALL - 所有的错误和警告  </span></span><br><span class="line"><span class="comment">; E_ERROR - 致命性运 时错  </span></span><br><span class="line"><span class="comment">; E_WARNING - 运 时警告( 致命性错)  </span></span><br><span class="line"><span class="comment">; E_PARSE - 编译时解析错误  </span></span><br><span class="line"><span class="comment">; E_NOTICE - 运 时提醒</span></span><br><span class="line"><span class="comment">; error_reporting = E_ALL &amp; ~E_NOTICE ; 显示所有的错误，除 提醒  </span></span><br><span class="line"><span class="comment">; error_reporting = E_COMPILE_ERROR|E_ERROR|E_CORE_ERROR ; 仅显示错 误 </span></span><br><span class="line"><span class="comment">; 显示所有的错误，除了提醒  </span></span><br><span class="line"><span class="attr">error_reporting</span> = E_ALL &amp; ~E_NOTICE </span><br><span class="line"><span class="comment">; 显示出错误信息(作为输出的一部分)</span></span><br><span class="line"><span class="attr">display_errors</span> = <span class="literal">On</span></span><br><span class="line"><span class="attr">log_errors</span> = <span class="literal">Off</span></span><br><span class="line"><span class="attr">error_log</span> = logs/error.log</span><br><span class="line"><span class="attr">default_mimetype</span> = <span class="string">"text/html"</span></span><br><span class="line"><span class="comment">;default_charset = "iso-8859-1"</span></span><br><span class="line"><span class="comment">; 存放可加载的扩充库(模块)的 录</span></span><br><span class="line"><span class="attr">extension_dir</span> = <span class="string">"./"</span></span><br><span class="line"><span class="comment">;extension=msql.so</span></span><br><span class="line"><span class="comment">; 这条指示告诉PHP是否声明argv和argc变量数 (注:这 argv为数组,argc为变量数)</span></span><br><span class="line"><span class="attr">register_argc_argv</span>=<span class="literal">On</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; PHP将接受的POST数据最大大小。</span></span><br><span class="line"><span class="attr">post_max_size</span> = <span class="number">8</span>M</span><br><span class="line"></span><br><span class="line"><span class="comment">; 是否允许HTTP方式文件上载</span></span><br><span class="line"><span class="attr">file_uploads</span> = <span class="literal">On</span> </span><br><span class="line"><span class="comment">; 存放用HTTP协议上载的文件的临时目录(在没指定时使用系统默认的)</span></span><br><span class="line"><span class="attr">upload_tmp_dir</span> = /tmp</span><br><span class="line"><span class="attr">upload_max_filesize</span> = <span class="number">2</span>M </span><br><span class="line"><span class="section">[Session]</span>  </span><br><span class="line"><span class="comment">; 于保存/取回数据的控制方式   </span></span><br><span class="line">session.save_handler = files</span><br><span class="line"><span class="comment">; 这是数据文件将保存的路径   </span></span><br><span class="line">session.save_path = /tmp</span><br><span class="line"><span class="comment">; 是否使用cookies  </span></span><br><span class="line">session.use_cookies = 1</span><br><span class="line">session.name = PHPSESSID</span><br><span class="line"><span class="comment">; 在请求启动时初始化session</span></span><br><span class="line">session.auto_start = 0 </span><br><span class="line"><span class="comment">; 为按秒记的cookie的保存时间,或为0时,直到浏览器被重启  </span></span><br><span class="line">session.cookie_lifetime = 0 </span><br><span class="line"><span class="comment">; cookie的有效路径  </span></span><br><span class="line">session.cookie_path = / </span><br><span class="line"><span class="comment">; cookie的有效域</span></span><br><span class="line">session.cookie_domain = </span><br><span class="line"><span class="comment">; 于连接数据的控制器; php是PHP的标准控制器</span></span><br><span class="line">session.serialize_handler = php </span><br><span class="line"><span class="comment">; 按百分 的'garbage collection(碎 整 )'进程  </span></span><br><span class="line">session.gc_probability = 1 </span><br><span class="line"><span class="comment">; 在每次 session 初始化的时候开始的可能性。  </span></span><br><span class="line"><span class="comment">; 在这里数字所指的秒数后，保存的数据将被视为'碎片(garbage)'并由gc进程清理掉</span></span><br><span class="line">session.gc_maxlifetime = 1440</span><br><span class="line"><span class="comment">; 设为&#123;nocache,private,public&#125;,以决定HTTP的缓存的问题  </span></span><br><span class="line">session.cache_limiter = nocache </span><br><span class="line"><span class="comment">; 文档在n分钟后过时</span></span><br><span class="line">session.cache_expire = 180</span><br></pre></td></tr></table></figure><p><strong>php-fpm.conf</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[global]</span></span><br><span class="line"><span class="attr">pid</span> = run/php-fpm.pid</span><br><span class="line"><span class="attr">error_log</span> = log/php-fpm.log</span><br><span class="line"></span><br><span class="line"><span class="comment">; Possible Values: alert, error, warning, notice, debug</span></span><br><span class="line"><span class="attr">log_level</span> = notice</span><br><span class="line"><span class="attr">emergency_restart_interval</span> = <span class="number">0</span></span><br><span class="line"><span class="attr">process_control_timeout</span> = <span class="number">0</span></span><br><span class="line">process.max = 128</span><br><span class="line"><span class="comment">;process.priority = -19</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; php-fpm运行模式，默认为后台运行</span></span><br><span class="line"><span class="attr">daemonize</span> = <span class="literal">yes</span></span><br><span class="line"><span class="comment">;rlimit_core = 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; fpm使用的事件驱动模型，默认没有设置，进行自动选择</span></span><br><span class="line"><span class="comment">;events.mechanism = epoll</span></span><br><span class="line"><span class="section">[www]</span></span><br><span class="line"><span class="attr">user</span> = www</span><br><span class="line"><span class="attr">group</span> = www</span><br><span class="line"><span class="attr">listen</span> = <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">9000</span></span><br><span class="line"><span class="comment">;listen.backlog = 65535</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 设置允许链接的客户端IP，默认为任何</span></span><br><span class="line"><span class="comment">;listen.allowed_clients = 127.0.0.1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 子进程控制模式，分为三种：</span></span><br><span class="line"><span class="comment">; static固定模式：子进程数一直等于pm.max_children</span></span><br><span class="line"><span class="comment">; dynamic动态模式：其子进程数量根据max_children、start_servers、min_spare_servers、max_spare_servers决定，但至少会有一个存在</span></span><br><span class="line"><span class="comment">; ondemand按需型：当请求来时才创建，最大存在数取决于max_children，process_idle_timeout指令表示空闲指定时间后退出</span></span><br><span class="line"><span class="attr">pm</span> = dynamic</span><br><span class="line"></span><br><span class="line"><span class="comment">; 最大子进程数</span></span><br><span class="line">pm.max_children = 5</span><br><span class="line"></span><br><span class="line"><span class="comment">; 启动时创建的子进程数，默认值为min_spare_servers + (max_spare_servers - min_spare_servers) / 2</span></span><br><span class="line">pm.start_servers = 2</span><br><span class="line">pm.min_spare_servers = 1</span><br><span class="line">pm.max_spare_servers = 3</span><br><span class="line"><span class="comment">;pm.process_idle_timeout = 500</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 处理完多少个请求后重启</span></span><br><span class="line"><span class="comment">;pm.max_requests = 500</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 请求日志记录文件</span></span><br><span class="line"><span class="comment">;access.log = log/$pool.access.log</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 请求日志文件格式</span></span><br><span class="line"><span class="comment">;access.format = "%R - %u %t \"%m %r%Q%q\" %s %f %&#123;mili&#125;d %&#123;kilo&#125;M %C%%"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 慢日志</span></span><br><span class="line"><span class="comment">;slowlog = log/$pool.log.slow</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;request_slowlog_timeout = 0</span></span><br><span class="line"><span class="comment">;request_terminate_timeout = 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 打开文件数，默认为系统上限</span></span><br><span class="line"><span class="comment">;rlimit_files = 1024</span></span><br></pre></td></tr></table></figure><h2 id="6-遇到的问题"><a href="#6-遇到的问题" class="headerlink" title="6 遇到的问题"></a>6 遇到的问题</h2><h3 id="6-1-nginx到php"><a href="#6-1-nginx到php" class="headerlink" title="6.1 nginx到php"></a>6.1 nginx到php</h3><blockquote><p><strong>问题描述：</strong>2017/08/12 23:27:22 [error] 13752#0: *10 FastCGI sent in stderr: “Primary script unknown” while reading response header from upstream, client: 127.0.0.1, server: localhost, request: “GET /index.php HTTP/1.1”, upstream: “fastcgi://127.0.0.1:9000”, host: “127.0.0.1:9091”</p></blockquote><p>这里的问题是nginx配置里到fpm的代理配置有问题：</p><blockquote><p>fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</p></blockquote><p>将此处修改为</p><blockquote><p>fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;</p></blockquote><p><strong>说明：</strong></p><blockquote><p>$document_root 代表当前请求在root指令中指定的值，上面配置中的$document_root就是针对/data0/www/htdocs/lnmp.com目录下的php文件进行解析</p></blockquote><h3 id="6-2-其他问题"><a href="#6-2-其他问题" class="headerlink" title="6.2 其他问题"></a>6.2 其他问题</h3><p>在安装过程中若遇到其他问题，均可以根据错误提示信息找到答案，google、百度都可以帮助你解决问题。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​    作为一个PHPer，没有手动搭过几次LNMP环境，都不算是一个真正的PHPer。此文主要以实际着手搭建一套lnmp环境为主线，介绍其中涉及到的技术点。包括php配置、php-fpm配置、nginx配置、mysql配置。以及这他们之间的关系。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Nginx" scheme="http://bemuler.github.io/tags/Nginx/"/>
    
      <category term="Linux" scheme="http://bemuler.github.io/tags/Linux/"/>
    
      <category term="MySQL" scheme="http://bemuler.github.io/tags/MySQL/"/>
    
      <category term="PHP" scheme="http://bemuler.github.io/tags/PHP/"/>
    
      <category term="LNMP" scheme="http://bemuler.github.io/tags/LNMP/"/>
    
  </entry>
  
</feed>
